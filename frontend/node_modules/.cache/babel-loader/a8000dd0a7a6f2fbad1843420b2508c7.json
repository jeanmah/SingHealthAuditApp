{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport AuthenticationService from \"./AuthenticationService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  const API_URL = \"http://localhost:8080\";\n  /*\n  =============== \n  BACKEND\n  ===============\n  */\n\n  /*\n  ---------------\n  FbChecklist\n  ---------------\n  */\n\n  const getAccountInfo = () => {\n    AuthenticationService.getStoredAxiosInterceptor(); // console.log(\"this is calling getAccountInfo\");\n\n    return axios.get(`${API_URL}/account/getUserProfile`, {\n      params: {}\n    }).then(response => {\n      // console.log(\"Response from getUserProfile\", response.data);\n      setAccountState(response.data);\n    }).catch(() => {\n      console.log(\"userProfile retrieval failed\");\n    });\n  };\n\n  const getAllChatsOfUser = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"This is calling getAllChatsOfUser\");\n    return axios.get(`${API_URL}/chat/getAllChatsOfUser`, {\n      params: {}\n    });\n  };\n\n  const getChatEntriesOfUser = chatId => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"This is calling getChatEntriesOfUser\"); //console.log(typeof parseInt(chatId));\n    //console.log(typeof parseInt(numLastestEntries));\n\n    return axios.get(`${API_URL}/chat/getChatEntriesOfUser`, {\n      params: {\n        parentChatId: parseInt(chatId) //numLastestChatEntries: parseInt(numLastestChatEntries),\n\n      }\n    });\n  };\n\n  const postCreateNewChat = (auditor_id, tenant_id) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"This is calling postCreateNewChat\");\n\n    let FormData = require(\"form-data\");\n\n    let formdata = new FormData();\n    formdata.append(\"auditor_id\", parseInt(auditor_id));\n    formdata.append(\"tenant_id\", parseInt(tenant_id));\n    return axios.post(`${API_URL}/chat/postCreateNewChat`, formdata, {\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`\n      }\n    }).then(response => {\n      console.log(response);\n    }).catch(() => {\n      console.log(\"Failed new chat creation\");\n    });\n  }; //function to get Fb Checklist questions\n\n\n  const getFbChecklistQuestions = () => {\n    AuthenticationService.getStoredAxiosInterceptor(); //   return axios\n    //     .get(`${API_URL}/report/getAllQuestions`, {\n    //       params: { type: \"FB\" },\n    //     })\n    //     .then((response) => {\n    //       setFbChecklistState(response.data);\n    //       createFbReportState(response.data);\n    //     })\n    //     .catch(() => {\n    //       console.log(\"fb checklist retrieval failed\");\n    //     });\n    // }, []);\n\n    return axios.get(`${API_URL}/report/getAllQuestions`, {\n      params: {\n        type: \"FB\"\n      }\n    });\n  }; //function to submit FbChecklist report to compute the score\n\n\n  const submitFbReport = useCallback((tenantid, fbreport) => {\n    console.log(fbreport);\n\n    let FormData = require(\"form-data\");\n\n    let formdata = new FormData();\n    formdata.append(\"checklist\", JSON.stringify(fbreport));\n    return axios.put(`${API_URL}/report/postReportSubmission?type=FB&tenant_id=${tenantid}&remarks=`, formdata, {\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`\n      } // params: { type: \"FB\", tenant_id: t_id, remarks: \"\" },\n      // data: formdata,\n\n    }).then(response => {\n      console.log(response); // if (response.status === 200) {\n      //   return <Redirect to={`/tenant/${tenantid}`} />;\n      // }\n    }).catch(() => {\n      console.log(\"Failed FB report submission\");\n    });\n  });\n  /*\n  ---------------\n  Institution\n  ---------------\n  */\n  //function to get tenants in a particular institution\n\n  const getInstitutionTenants = name => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(name);\n    return axios.get(`${API_URL}/account/getAllTenantsOfBranch`, {\n      params: {\n        branch_id: name\n      }\n    });\n  };\n  /*\n  --------------- \n  Tenant\n  ---------------\n  */\n  //function to get user info given user id\n\n\n  const getUserInfo = userId => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/account/getUserProfile`, {\n      params: {\n        user_id: parseInt(userId)\n      }\n    });\n  };\n\n  const getUserInfoNoParams = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/account/getUserProfile`);\n  };\n  /*\n  --------------------- \n  Home Auditor & Tenant\n  ----------------------\n  */\n  //function to get all the audits done given auditor's username\n\n\n  const getAudits = userName => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportIDs`, {\n      params: {\n        username: userName,\n        type: \"ALL\"\n      }\n    });\n  };\n\n  const getTenantAudits = tenantid => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportIDs`, {\n      params: {\n        user_id: tenantid,\n        type: \"ALL\"\n      }\n    });\n  }; // const getClosedTenantAudits = (tenantid) => {\n  //   AuthenticationService.getStoredAxiosInterceptor();\n  //   return axios.get(`${API_URL}/report/getReportIDs`, {\n  //     params: { user_id: tenantid, type: \"CLOSED\" },\n  //   });\n  // };\n\n\n  const getReport = reportId => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReport`, {\n      params: {\n        report_id: parseInt(reportId)\n      }\n    });\n  };\n\n  const getReportStats = reportId => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportStatistics`, {\n      params: {\n        report_id: parseInt(reportId)\n      }\n    });\n  };\n\n  const getReportEntry = (reportId, entryId) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportEntry`, {\n      params: {\n        report_id: parseInt(reportId),\n        entry_id: entryId\n      }\n    });\n  }; // const filterAudits = (category) => {\n  //   console.log(auditsState);\n  // };\n\n  /*\n  =============== \n  FRONTEND\n  ===============\n  */\n  //FRONTEND STATES AND FUNCTIONS\n  //state for report ids\n\n\n  const [reportIdsState, setReportIdsState] = useState(); //state for report\n\n  const [fbReportState, setFbReportState] = useState([]); //state to keep track of audit\n\n  const [auditsState, setAuditsState] = useState(); //state to keep track of all tenants\n\n  const [tenantState, setTenantState] = useState(); //state for fbChecklist\n  //state for institutions\n  //const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state for account\n\n  const [accountState, setAccountState] = useState([]); //state for chats of user\n\n  const [allChatsOfUserState, setAllChatsOfUserState] = useState([]); //state for chat entries of a chat\n\n  const [chatEntriesOfUserState, setChatEntriesOfUserState] = useState([]); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //function to prepare report state\n\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist); //create temporary array\n\n    let array = [];\n    checklist.forEach(question => {\n      const {\n        fb_qn_id\n      } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: true,\n        severity: 0,\n        remarks: \"\",\n        images: \"\"\n      });\n    }); //set fbreportstate to array\n\n    setFbReportState(array);\n  }, []); //function to update audits state\n  // const updateAudit = (\n  //   tenantid,\n  //   type,\n  //   tenantname,\n  //   // timeremaining,\n  //   status\n  //   // date\n  // ) => {\n  //   const tenantObject = tenantsState.find(\n  //     (tenant) => tenant.tenantid === tenantid\n  //   );\n  //   const tenantFbChecklist = tenantObject.fbChecklist;\n  //   let score = tenantFbChecklist.reduce((total, question) => {\n  //     if (question.checked === true) {\n  //       total += 1;\n  //     }\n  //     return total;\n  //   }, 0);\n  //   setAuditsState((prevAudits) => {\n  //     return [\n  //       ...prevAudits,\n  //       {\n  //         tenantid: tenantid,\n  //         type: type,\n  //         tenantname: tenantname,\n  //         // timeremaining: timeremaining,\n  //         status: status,\n  //         // date: date,\n  //         institution: tenantObject.institution,\n  //         score: score,\n  //       },\n  //     ];\n  //   });\n  // };\n  //function to reset tenant's fb checklist checked values\n  // const resetTenantFbChecklist = (tenantId) => {\n  //   const tenantObject = tenantsState.find(\n  //     (tenant) => tenant.tenantid === tenantId\n  //   );\n  //   //fbchecklist property for a tenant\n  //   const tenantFbChecklist = tenantObject.fbChecklist;\n  //   //reset each checked to false\n  //   tenantFbChecklist.forEach((question) => {\n  //     question.checked = false;\n  //   });\n  //   // //get tenants array without tenantObject\n  //   // const remainingTenants = tenantsState.filter((tenant) => {\n  //   //   return tenant.tenantid !== tenantId;\n  //   // });\n  //   // //update state with newTenantObject\n  //   // setTenantsState([...remainingTenants, tenantObject]);\n  // };\n  //functions to update tenant comment property\n  // const updateTenantComment = (tenantId, questionId) => {\n  //   //find object with specific tenantId\n  //   const tenantObject = tenantsState.find((tenant) => {\n  //     return tenant.tenantid === tenantId;\n  //   });\n  //   //fbchecklist property for a tenant\n  //   const tenantFbChecklist = tenantObject.fbChecklist;\n  //   //find question within the array of questions\n  //   const checklistQuestion = tenantFbChecklist.find((question) => {\n  //     return question.id === questionId;\n  //   });\n  //   //update checked property\n  //   checklistQuestion.comment = comment;\n  //   console.log(tenantId, questionId);\n  //   console.log(tenantObject);\n  //   console.log(tenantsState);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      // openQuestionModal,\n      // closeQuestionModal,\n      tenantState,\n      setTenantState,\n      auditsState,\n      setAuditsState,\n      // resetTenantFbChecklist,\n      comment,\n      setComment,\n      // updateTenantComment,\n      getFbChecklistQuestions,\n      accountState,\n      setAccountState,\n      getAccountInfo,\n      allChatsOfUserState,\n      setAllChatsOfUserState,\n      getAllChatsOfUser,\n      postCreateNewChat,\n      chatEntriesOfUserState,\n      setChatEntriesOfUserState,\n      getChatEntriesOfUser,\n      fbReportState,\n      setFbReportState,\n      createFbReportState,\n      submitFbReport,\n      getInstitutionTenants,\n      getUserInfo,\n      getUserInfoNoParams,\n      getAudits,\n      getReport,\n      // getClosedTenantAudits,\n      getTenantAudits,\n      getReportStats,\n      getReportEntry\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"4U7OLDdgRGOY/5XxqSa7CrfJec0=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/mac/Documents/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","useCallback","audits","fbChecklist","tenants","institutions","axios","Redirect","AuthenticationService","Context","ContextProvider","props","API_URL","getAccountInfo","getStoredAxiosInterceptor","get","params","then","response","setAccountState","data","catch","console","log","getAllChatsOfUser","getChatEntriesOfUser","chatId","parentChatId","parseInt","postCreateNewChat","auditor_id","tenant_id","FormData","require","formdata","append","post","headers","_boundary","getFbChecklistQuestions","type","submitFbReport","tenantid","fbreport","JSON","stringify","put","getInstitutionTenants","name","branch_id","getUserInfo","userId","user_id","getUserInfoNoParams","getAudits","userName","username","getTenantAudits","getReport","reportId","report_id","getReportStats","getReportEntry","entryId","entry_id","reportIdsState","setReportIdsState","fbReportState","setFbReportState","auditsState","setAuditsState","tenantState","setTenantState","accountState","allChatsOfUserState","setAllChatsOfUserState","chatEntriesOfUserState","setChatEntriesOfUserState","comment","setComment","createFbReportState","checklist","array","forEach","question","fb_qn_id","push","qn_id","status","severity","remarks","images","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport AuthenticationService from \"./AuthenticationService\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  const API_URL = \"http://localhost:8080\";\n\n  /*\n  =============== \n  BACKEND\n  ===============\n  */\n\n  /*\n  ---------------\n  FbChecklist\n  ---------------\n  */\n\n  const getAccountInfo = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    // console.log(\"this is calling getAccountInfo\");\n    return axios\n      .get(`${API_URL}/account/getUserProfile`, {\n        params: {},\n      })\n      .then((response) => {\n        // console.log(\"Response from getUserProfile\", response.data);\n        setAccountState(response.data);\n      })\n      .catch(() => {\n        console.log(\"userProfile retrieval failed\");\n      });\n  };\n\n  const getAllChatsOfUser = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"This is calling getAllChatsOfUser\");\n    return axios\n      .get(`${API_URL}/chat/getAllChatsOfUser`, {\n        params: {},\n      });\n  };\n\n  const getChatEntriesOfUser = (chatId) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"This is calling getChatEntriesOfUser\");\n    //console.log(typeof parseInt(chatId));\n    //console.log(typeof parseInt(numLastestEntries));\n    return axios\n      .get(`${API_URL}/chat/getChatEntriesOfUser`, {\n        params: {\n          parentChatId: parseInt(chatId),\n          //numLastestChatEntries: parseInt(numLastestChatEntries),\n        },\n      });\n  };\n\n  const postCreateNewChat = (auditor_id, tenant_id) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"This is calling postCreateNewChat\");\n    let FormData = require(\"form-data\");\n    let formdata = new FormData();\n    formdata.append(\"auditor_id\", parseInt(auditor_id));\n    formdata.append(\"tenant_id\", parseInt(tenant_id));\n    return axios\n      .post(\n        `${API_URL}/chat/postCreateNewChat`,\n        formdata,\n        {\n          headers: {\n            \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n      })\n      .catch(() => {\n        console.log(\"Failed new chat creation\");\n      });\n  };\n\n  //function to get Fb Checklist questions\n  const getFbChecklistQuestions = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    //   return axios\n    //     .get(`${API_URL}/report/getAllQuestions`, {\n    //       params: { type: \"FB\" },\n    //     })\n    //     .then((response) => {\n    //       setFbChecklistState(response.data);\n    //       createFbReportState(response.data);\n    //     })\n    //     .catch(() => {\n    //       console.log(\"fb checklist retrieval failed\");\n    //     });\n    // }, []);\n\n    return axios.get(`${API_URL}/report/getAllQuestions`, {\n      params: { type: \"FB\" },\n    });\n  };\n\n  //function to submit FbChecklist report to compute the score\n  const submitFbReport = useCallback((tenantid, fbreport) => {\n    console.log(fbreport);\n    let FormData = require(\"form-data\");\n    let formdata = new FormData();\n    formdata.append(\"checklist\", JSON.stringify(fbreport));\n    return axios\n      .put(\n        `${API_URL}/report/postReportSubmission?type=FB&tenant_id=${tenantid}&remarks=`,\n        formdata,\n        {\n          headers: {\n            \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`,\n          },\n          // params: { type: \"FB\", tenant_id: t_id, remarks: \"\" },\n          // data: formdata,\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        // if (response.status === 200) {\n        //   return <Redirect to={`/tenant/${tenantid}`} />;\n        // }\n      })\n      .catch(() => {\n        console.log(\"Failed FB report submission\");\n      });\n  });\n\n  /*\n  ---------------\n  Institution\n  ---------------\n  */\n\n  //function to get tenants in a particular institution\n  const getInstitutionTenants = (name) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(name);\n    return axios.get(`${API_URL}/account/getAllTenantsOfBranch`, {\n      params: { branch_id: name },\n    });\n  };\n  /*\n  --------------- \n  Tenant\n  ---------------\n  */\n  //function to get user info given user id\n  const getUserInfo = (userId) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n\n    return axios.get(`${API_URL}/account/getUserProfile`, {\n      params: { user_id: parseInt(userId) },\n    });\n  };\n\n  const getUserInfoNoParams = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/account/getUserProfile`);\n  };\n\n  /*\n  --------------------- \n  Home Auditor & Tenant\n  ----------------------\n  */\n\n  //function to get all the audits done given auditor's username\n  const getAudits = (userName) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportIDs`, {\n      params: { username: userName, type: \"ALL\" },\n    });\n  };\n\n  const getTenantAudits = (tenantid) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportIDs`, {\n      params: { user_id: tenantid, type: \"ALL\" },\n    });\n  };\n\n  // const getClosedTenantAudits = (tenantid) => {\n  //   AuthenticationService.getStoredAxiosInterceptor();\n  //   return axios.get(`${API_URL}/report/getReportIDs`, {\n  //     params: { user_id: tenantid, type: \"CLOSED\" },\n  //   });\n  // };\n\n  const getReport = (reportId) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReport`, {\n      params: { report_id: parseInt(reportId) },\n    });\n  };\n\n  const getReportStats = (reportId) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportStatistics`, {\n      params: { report_id: parseInt(reportId) },\n    });\n  };\n\n  const getReportEntry = (reportId, entryId) => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getReportEntry`, {\n      params: { report_id: parseInt(reportId), entry_id: entryId },\n    });\n  };\n\n  // const filterAudits = (category) => {\n  //   console.log(auditsState);\n  // };\n\n  /*\n  =============== \n  FRONTEND\n  ===============\n  */\n  //FRONTEND STATES AND FUNCTIONS\n  //state for report ids\n  const [reportIdsState, setReportIdsState] = useState();\n  //state for report\n  const [fbReportState, setFbReportState] = useState([]);\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState();\n  //state to keep track of all tenants\n  const [tenantState, setTenantState] = useState();\n  //state for fbChecklist\n\n  //state for institutions\n  //const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state for account\n  const [accountState, setAccountState] = useState([]);\n  //state for chats of user\n  const [allChatsOfUserState, setAllChatsOfUserState] = useState([]);\n  //state for chat entries of a chat\n  const [chatEntriesOfUserState, setChatEntriesOfUserState] = useState([]);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n\n  //function to prepare report state\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist);\n    //create temporary array\n    let array = [];\n    checklist.forEach((question) => {\n      const { fb_qn_id } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: true,\n        severity: 0,\n        remarks: \"\",\n        images: \"\",\n      });\n    });\n    //set fbreportstate to array\n    setFbReportState(array);\n  }, []);\n\n  //function to update audits state\n  // const updateAudit = (\n  //   tenantid,\n  //   type,\n  //   tenantname,\n  //   // timeremaining,\n  //   status\n  //   // date\n  // ) => {\n  //   const tenantObject = tenantsState.find(\n  //     (tenant) => tenant.tenantid === tenantid\n  //   );\n  //   const tenantFbChecklist = tenantObject.fbChecklist;\n  //   let score = tenantFbChecklist.reduce((total, question) => {\n  //     if (question.checked === true) {\n  //       total += 1;\n  //     }\n  //     return total;\n  //   }, 0);\n\n  //   setAuditsState((prevAudits) => {\n  //     return [\n  //       ...prevAudits,\n  //       {\n  //         tenantid: tenantid,\n  //         type: type,\n  //         tenantname: tenantname,\n  //         // timeremaining: timeremaining,\n  //         status: status,\n  //         // date: date,\n  //         institution: tenantObject.institution,\n  //         score: score,\n  //       },\n  //     ];\n  //   });\n  // };\n\n  //function to reset tenant's fb checklist checked values\n  // const resetTenantFbChecklist = (tenantId) => {\n  //   const tenantObject = tenantsState.find(\n  //     (tenant) => tenant.tenantid === tenantId\n  //   );\n  //   //fbchecklist property for a tenant\n  //   const tenantFbChecklist = tenantObject.fbChecklist;\n  //   //reset each checked to false\n  //   tenantFbChecklist.forEach((question) => {\n  //     question.checked = false;\n  //   });\n  //   // //get tenants array without tenantObject\n  //   // const remainingTenants = tenantsState.filter((tenant) => {\n  //   //   return tenant.tenantid !== tenantId;\n  //   // });\n  //   // //update state with newTenantObject\n  //   // setTenantsState([...remainingTenants, tenantObject]);\n  // };\n\n  //functions to update tenant comment property\n  // const updateTenantComment = (tenantId, questionId) => {\n  //   //find object with specific tenantId\n  //   const tenantObject = tenantsState.find((tenant) => {\n  //     return tenant.tenantid === tenantId;\n  //   });\n  //   //fbchecklist property for a tenant\n  //   const tenantFbChecklist = tenantObject.fbChecklist;\n  //   //find question within the array of questions\n  //   const checklistQuestion = tenantFbChecklist.find((question) => {\n  //     return question.id === questionId;\n  //   });\n  //   //update checked property\n  //   checklistQuestion.comment = comment;\n  //   console.log(tenantId, questionId);\n  //   console.log(tenantObject);\n  //   console.log(tenantsState);\n  // };\n\n  return (\n    <Context.Provider\n      value={{\n        // openQuestionModal,\n        // closeQuestionModal,\n        tenantState,\n        setTenantState,\n        auditsState,\n        setAuditsState,\n        // resetTenantFbChecklist,\n\n        comment,\n        setComment,\n        // updateTenantComment,\n        getFbChecklistQuestions,\n\n        accountState,\n        setAccountState,\n        getAccountInfo,\n\n        allChatsOfUserState,\n        setAllChatsOfUserState,\n        getAllChatsOfUser,\n        postCreateNewChat,\n\n        chatEntriesOfUserState,\n        setChatEntriesOfUserState,\n        getChatEntriesOfUser,\n\n        fbReportState,\n        setFbReportState,\n        createFbReportState,\n        submitFbReport,\n        getInstitutionTenants,\n        getUserInfo,\n        getUserInfoNoParams,\n        getAudits,\n        getReport,\n        // getClosedTenantAudits,\n        getTenantAudits,\n        getReportStats,\n        getReportEntry,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}