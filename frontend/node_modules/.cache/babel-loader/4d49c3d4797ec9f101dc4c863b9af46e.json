{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Loading from \"./Loading\";\nimport Navbar from \"../Navbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\"; //styling for the fbchecklist page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(4, 0, 10, 0)\n  },\n  list: {\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\" // alignItems: \"center\",\n\n  },\n  button: {\n    color: \"#F15A22\",\n    fontWeight: \"medium\",\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n    height: 50\n  },\n  header: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(2, 2, 2, 2)\n  }\n}));\n\nfunction FbChecklist() {\n  _s();\n\n  //use styles from function declared above\n  const classes = useStyles(); //get tenant id from url\n\n  const {\n    tenantId\n  } = useParams(); //Context\n\n  const {\n    getFbChecklistQuestions,\n    createFbReportState,\n    getUserInfo,\n    fbReportState,\n    submitFbReport\n  } = useContext(Context); //state to update fb checklist questions\n\n  const [fbChecklistState, setFbChecklistState] = useState();\n  const [tenantName, setTenantName] = useState();\n  useEffect(() => {\n    //function to retrieve questions\n    async function getTenantName() {\n      try {\n        const tenant_name = await getUserInfo(tenantId).then(response => {\n          return response.data.store_name;\n        }); // console.log(tenant_name);\n\n        setTenantName(tenant_name);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getTenantName();\n    getFbChecklistQuestions().then(response => {\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []); //function to submit report upon click of submit\n\n  async function handleSubmit(tenantid, report) {\n    let score = await submitFbReport(tenantid, report); // console.log(score);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: fbChecklistState && tenantName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.header,\n        textAlign: \"center\",\n        boxShadow: 1,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [tenantName, \" F&B Checklist\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          className: classes.list,\n          children: fbChecklistState.map((question, index) => {\n            const {\n              fb_qn_id,\n              requirement\n            } = question;\n            const labelId = `checkbox-list-secondary-label-${fb_qn_id}`;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Question, {\n                fb_qn_id: fb_qn_id,\n                requirement: requirement,\n                labelId: labelId\n              }, fb_qn_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/tenant/${tenantid}`,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.button,\n            size: \"small\",\n            onClick: () => {\n              handleSubmit(tenantId, fbReportState);\n            } // color=\"secondary\"\n            ,\n            children: \"Submit checklist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(FbChecklist, \"66YDW8D7ouMkow7G73g5axO1RXs=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = FbChecklist;\nexport default FbChecklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"FbChecklist\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js"],"names":["React","useState","useContext","useEffect","useCallback","useParams","Link","Question","Context","Loading","Navbar","makeStyles","List","Box","Button","Grid","Typography","useStyles","theme","root","display","flexDirection","alignItems","padding","spacing","list","width","maxWidth","backgroundColor","palette","background","paper","button","color","fontWeight","height","header","FbChecklist","classes","tenantId","getFbChecklistQuestions","createFbReportState","getUserInfo","fbReportState","submitFbReport","fbChecklistState","setFbChecklistState","tenantName","setTenantName","getTenantName","tenant_name","then","response","data","store_name","err","console","log","catch","handleSubmit","tenantid","report","score","map","question","index","fb_qn_id","requirement","labelId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,kBAAhC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB,C,CAEA;;;;AACA,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,aAAa,EAAE,QAFX;AAGJC,IAAAA,UAAU,EAAE,QAHR;AAIJC,IAAAA,OAAO,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,EAApB,EAAwB,CAAxB;AAJL,GADiC;AAOvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,QAAQ,EAAE,GAFN;AAGJC,IAAAA,eAAe,EAAEV,KAAK,CAACW,OAAN,CAAcC,UAAd,CAAyBC,KAHtC;AAIJX,IAAAA,OAAO,EAAE,MAJL;AAKJC,IAAAA,aAAa,EAAE,QALX,CAOJ;;AAPI,GAPiC;AAgBvCW,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,SADD;AAENC,IAAAA,UAAU,EAAE,QAFN;AAGNR,IAAAA,KAAK,EAAE,MAHD;AAINC,IAAAA,QAAQ,EAAE,GAJJ;AAKNC,IAAAA,eAAe,EAAEV,KAAK,CAACW,OAAN,CAAcC,UAAd,CAAyBC,KALpC;AAMNI,IAAAA,MAAM,EAAE;AANF,GAhB+B;AAwBvCC,EAAAA,MAAM,EAAE;AACNR,IAAAA,eAAe,EAAEV,KAAK,CAACW,OAAN,CAAcC,UAAd,CAAyBC,KADpC;AAENR,IAAAA,OAAO,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AAFH;AAxB+B,CAAZ,CAAD,CAA5B;;AA8BA,SAASa,WAAT,GAAuB;AAAA;;AACrB;AACA,QAAMC,OAAO,GAAGrB,SAAS,EAAzB,CAFqB,CAGrB;;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAelC,SAAS,EAA9B,CAJqB,CAMrB;;AACA,QAAM;AACJmC,IAAAA,uBADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA;AALI,MAMF1C,UAAU,CAACM,OAAD,CANd,CAPqB,CAerB;;AACA,QAAM,CAACqC,gBAAD,EAAmBC,mBAAnB,IAA0C7C,QAAQ,EAAxD;AACA,QAAM,CAAC8C,UAAD,EAAaC,aAAb,IAA8B/C,QAAQ,EAA5C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,mBAAe8C,aAAf,GAA+B;AAC7B,UAAI;AACF,cAAMC,WAAW,GAAG,MAAMR,WAAW,CAACH,QAAD,CAAX,CAAsBY,IAAtB,CAA4BC,QAAD,IAAc;AACjE,iBAAOA,QAAQ,CAACC,IAAT,CAAcC,UAArB;AACD,SAFyB,CAA1B,CADE,CAIF;;AACAN,QAAAA,aAAa,CAACE,WAAD,CAAb;AACD,OAND,CAME,OAAOK,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AACDN,IAAAA,aAAa;AACbT,IAAAA,uBAAuB,GACpBW,IADH,CACSC,QAAD,IAAc;AAClBN,MAAAA,mBAAmB,CAACM,QAAQ,CAACC,IAAV,CAAnB;AACAZ,MAAAA,mBAAmB,CAACW,QAAQ,CAACC,IAAV,CAAnB;AACD,KAJH,EAKGK,KALH,CAKS,MAAM;AACXF,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAPH;AAQD,GAtBQ,EAsBN,EAtBM,CAAT,CAnBqB,CA2CrB;;AACA,iBAAeE,YAAf,CAA4BC,QAA5B,EAAsCC,MAAtC,EAA8C;AAC5C,QAAIC,KAAK,GAAG,MAAMlB,cAAc,CAACgB,QAAD,EAAWC,MAAX,CAAhC,CAD4C,CAE5C;AACD;;AAED,sBACE;AAAA,cACGhB,gBAAgB,IAAIE,UAApB,gBACC;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAET,OAAO,CAACF,MAAxB;AAAgC,QAAA,SAAS,EAAC,QAA1C;AAAmD,QAAA,SAAS,EAAE,CAA9D;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA,qBAA0BW,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAME,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,SAAS,EAAET,OAAO,CAACnB,IAAnC;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,KAAK,MAAX;AAAY,UAAA,SAAS,EAAEmB,OAAO,CAACb,IAA/B;AAAA,oBACGoB,gBAAgB,CAACkB,GAAjB,CAAqB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,kBAAM;AAAEC,cAAAA,QAAF;AAAYC,cAAAA;AAAZ,gBAA4BH,QAAlC;AACA,kBAAMI,OAAO,GAAI,iCAAgCF,QAAS,EAA1D;AACA,gCACE;AAAA,qCACE,QAAC,QAAD;AAEE,gBAAA,QAAQ,EAAEA,QAFZ;AAGE,gBAAA,WAAW,EAAEC,WAHf;AAIE,gBAAA,OAAO,EAAEC;AAJX,iBACOF,QADP;AAAA;AAAA;AAAA;AAAA;AADF,6BADF;AAUD,WAbA;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAiBE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,WAAUN,QAAS,EAA9B;AAAA,iCACE,QAAC,MAAD;AACE,YAAA,SAAS,EAAEtB,OAAO,CAACN,MADrB;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,OAAO,EAAE,MAAM;AACb2B,cAAAA,YAAY,CAACpB,QAAD,EAAWI,aAAX,CAAZ;AACD,aALH,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA,oBADD,gBAuCC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAxCJ,mBADF;AA6CD;;GA9FQN,W;UAESpB,S,EAEKZ,S;;;KAJdgC,W;AAgGT,eAAeA,WAAf","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Loading from \"./Loading\";\nimport Navbar from \"../Navbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\n//styling for the fbchecklist page\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(4, 0, 10, 0),\n  },\n  list: {\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\",\n\n    // alignItems: \"center\",\n  },\n  button: {\n    color: \"#F15A22\",\n    fontWeight: \"medium\",\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n    height: 50,\n  },\n  header: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(2, 2, 2, 2),\n  },\n}));\n\nfunction FbChecklist() {\n  //use styles from function declared above\n  const classes = useStyles();\n  //get tenant id from url\n  const { tenantId } = useParams();\n\n  //Context\n  const {\n    getFbChecklistQuestions,\n    createFbReportState,\n    getUserInfo,\n    fbReportState,\n    submitFbReport,\n  } = useContext(Context);\n\n  //state to update fb checklist questions\n  const [fbChecklistState, setFbChecklistState] = useState();\n  const [tenantName, setTenantName] = useState();\n\n  useEffect(() => {\n    //function to retrieve questions\n    async function getTenantName() {\n      try {\n        const tenant_name = await getUserInfo(tenantId).then((response) => {\n          return response.data.store_name;\n        });\n        // console.log(tenant_name);\n        setTenantName(tenant_name);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    getTenantName();\n    getFbChecklistQuestions()\n      .then((response) => {\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  //function to submit report upon click of submit\n  async function handleSubmit(tenantid, report) {\n    let score = await submitFbReport(tenantid, report);\n    // console.log(score);\n  }\n\n  return (\n    <>\n      {fbChecklistState && tenantName ? (\n        <>\n          <Navbar />\n          <Box className={classes.header} textAlign=\"center\" boxShadow={1}>\n            <Typography variant=\"h5\">{tenantName} F&B Checklist</Typography>\n          </Box>\n\n          <Grid container className={classes.root}>\n            <List dense className={classes.list}>\n              {fbChecklistState.map((question, index) => {\n                const { fb_qn_id, requirement } = question;\n                const labelId = `checkbox-list-secondary-label-${fb_qn_id}`;\n                return (\n                  <>\n                    <Question\n                      key={fb_qn_id}\n                      fb_qn_id={fb_qn_id}\n                      requirement={requirement}\n                      labelId={labelId}\n                    />\n                  </>\n                );\n              })}\n            </List>\n            <Link to={`/tenant/${tenantid}`}>\n              <Button\n                className={classes.button}\n                size=\"small\"\n                onClick={() => {\n                  handleSubmit(tenantId, fbReportState);\n                }}\n                // color=\"secondary\"\n              >\n                Submit checklist\n              </Button>\n            </Link>\n          </Grid>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n}\n\nexport default FbChecklist;\n"]},"metadata":{},"sourceType":"module"}