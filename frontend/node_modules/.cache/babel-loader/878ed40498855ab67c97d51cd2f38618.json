{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n  const getFbChecklistQuestions = useCallback(() => {\n    return axios.get(`${API_URL}/report/getAllQuestions`, {\n      params: {\n        type: \"FB\"\n      }\n    }).then(response => {\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []);\n  const submitFbReport = useCallback((tenantid, fbreport) => {\n    // const t_id = parseInt(tenantid);\n    // console.log(JSON.stringify(fbreport));\n    // console.log(\"reached here\");\n    // let FormData = require(\"form-data\");\n    // let formdata = new FormData();\n    // formdata.append(\"checklist\", JSON.stringify(fbreport));\n    // return axios\n    //   .post(\n    //     `${API_URL}/report/postReportSubmission?type=FB&tenant_id=${tenantid}&remarks=`,\n    //     {\n    //       headers: {\n    //         \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`,\n    //       },\n    //       // params: { type: \"FB\", tenant_id: t_id, remarks: \"\" },\n    //       data: formdata,\n    //     }\n    //   )\n    //   .then((response) => {\n    //     console.log(response);\n    //   })\n    //   .catch(() => {\n    //     console.log(\"Failed FB report submission\");\n    //   });\n    const axios = require(\"axios\");\n\n    const FormData = require(\"form-data\");\n\n    let data = new FormData();\n    data.append(\"checklist\", '[ { \"qn_id\" : 0, \"status\" : true } ,  { \"qn_id\" : 20, \"status\" : true, \"remarks\" : null, \"severity\": 0, \"images\": [\"abc\", \"bca\"] },  { \"qn_id\" : 30, \"status\" : true, \"remarks\" : \"dirty bowl\", \"severity\": 2, \"images\": [\"abc\", \"bca\"] },  { \"qn_id\" : 67, \"status\" : true, \"remarks\" : null, \"severity\": 0, \"images\": [\"abc\", \"bca\"] },  { \"qn_id\" : 88, \"status\" : true, \"remarks\" : null, \"severity\": 0, \"images\": [\"abc\", \"bca\"] }]');\n    let config = {\n      method: \"post\",\n      url: 'http://localhost:8080/report/postReportSubmission?type=FB&tenant_id=1002&remarks=\"LALA\"',\n      data: data\n    };\n    axios(config).then(response => {\n      console.log(JSON.stringify(response.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  }); //FRONTEND STATES AND FUNCTIONS\n  //state for report\n\n  const [fbReportState, setFbReportState] = useState([]); //state to keep track of audit\n\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //function to prepare report state\n\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist); //create temporary array\n\n    let array = [];\n    checklist.forEach(question => {\n      const {\n        fb_qn_id\n      } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: false\n      });\n    }); //set fbreportstate to array\n\n    setFbReportState(array);\n    console.log(\"created fb report\");\n    console.log(array);\n  }, []); //function to update audits state\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to close and open modal\n\n\n  const openQuestionModal = questionId => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  const closeQuestionModal = questionId => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      openQuestionModal,\n      closeQuestionModal,\n      tenantsState,\n      setTenantsState,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment,\n      getFbChecklistQuestions,\n      fbReportState,\n      setFbReportState,\n      createFbReportState,\n      submitFbReport\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"LAqhw5Vv0jAonUptSsnhFkRZIzI=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","useCallback","audits","fbChecklist","tenants","institutions","axios","Context","ContextProvider","props","API_URL","getFbChecklistQuestions","get","params","type","then","response","setFbChecklistState","data","createFbReportState","catch","console","log","submitFbReport","tenantid","fbreport","require","FormData","append","config","method","url","JSON","stringify","error","fbReportState","setFbReportState","auditsState","setAuditsState","tenantsState","setTenantsState","fbChecklistState","institutionsState","setInstitutionstate","comment","setComment","checklist","array","forEach","question","fb_qn_id","push","qn_id","status","updateAudit","tenantname","tenantObject","find","tenant","tenantFbChecklist","score","reduce","total","checked","prevAudits","institution","resetTenantFbChecklist","tenantId","openQuestionModal","questionId","checklistQuestion","id","modalOpen","closeQuestionModal","updateTenantComment","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n\n  const getFbChecklistQuestions = useCallback(() => {\n    return axios\n      .get(`${API_URL}/report/getAllQuestions`, {\n        params: { type: \"FB\" },\n      })\n      .then((response) => {\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  const submitFbReport = useCallback((tenantid, fbreport) => {\n    // const t_id = parseInt(tenantid);\n    // console.log(JSON.stringify(fbreport));\n    // console.log(\"reached here\");\n    // let FormData = require(\"form-data\");\n    // let formdata = new FormData();\n    // formdata.append(\"checklist\", JSON.stringify(fbreport));\n    // return axios\n    //   .post(\n    //     `${API_URL}/report/postReportSubmission?type=FB&tenant_id=${tenantid}&remarks=`,\n    //     {\n    //       headers: {\n    //         \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`,\n    //       },\n    //       // params: { type: \"FB\", tenant_id: t_id, remarks: \"\" },\n    //       data: formdata,\n    //     }\n    //   )\n    //   .then((response) => {\n    //     console.log(response);\n    //   })\n    //   .catch(() => {\n    //     console.log(\"Failed FB report submission\");\n    //   });\n    const axios = require(\"axios\");\n    const FormData = require(\"form-data\");\n    let data = new FormData();\n    data.append(\n      \"checklist\",\n      '[ { \"qn_id\" : 0, \"status\" : true } ,  { \"qn_id\" : 20, \"status\" : true, \"remarks\" : null, \"severity\": 0, \"images\": [\"abc\", \"bca\"] },  { \"qn_id\" : 30, \"status\" : true, \"remarks\" : \"dirty bowl\", \"severity\": 2, \"images\": [\"abc\", \"bca\"] },  { \"qn_id\" : 67, \"status\" : true, \"remarks\" : null, \"severity\": 0, \"images\": [\"abc\", \"bca\"] },  { \"qn_id\" : 88, \"status\" : true, \"remarks\" : null, \"severity\": 0, \"images\": [\"abc\", \"bca\"] }]'\n    );\n\n    let config = {\n      method: \"post\",\n      url:\n        'http://localhost:8080/report/postReportSubmission?type=FB&tenant_id=1002&remarks=\"LALA\"',\n\n      data: data,\n    };\n\n    axios(config)\n      .then((response) => {\n        console.log(JSON.stringify(response.data));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  });\n\n  //FRONTEND STATES AND FUNCTIONS\n  //state for report\n  const [fbReportState, setFbReportState] = useState([]);\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n\n  //function to prepare report state\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist);\n    //create temporary array\n    let array = [];\n    checklist.forEach((question) => {\n      const { fb_qn_id } = question;\n      array.push({ qn_id: fb_qn_id, status: false });\n    });\n    //set fbreportstate to array\n    setFbReportState(array);\n    console.log(\"created fb report\");\n    console.log(array);\n  }, []);\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantid\n    );\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n\n    setAuditsState((prevAudits) => {\n      return [\n        ...prevAudits,\n        {\n          tenantid: tenantid,\n          type: type,\n          tenantname: tenantname,\n          // timeremaining: timeremaining,\n          status: status,\n          // date: date,\n          institution: tenantObject.institution,\n          score: score,\n        },\n      ];\n    });\n  };\n\n  //function to reset tenant's fb checklist checked values\n  const resetTenantFbChecklist = (tenantId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //reset each checked to false\n    tenantFbChecklist.forEach((question) => {\n      question.checked = false;\n    });\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //functions to close and open modal\n  const openQuestionModal = (questionId) => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n  const closeQuestionModal = (questionId) => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  //functions to update tenant comment property\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        openQuestionModal,\n        closeQuestionModal,\n        tenantsState,\n        setTenantsState,\n\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n        resetTenantFbChecklist,\n        comment,\n        setComment,\n        updateTenantComment,\n        getFbChecklistQuestions,\n\n        fbReportState,\n        setFbReportState,\n        createFbReportState,\n        submitFbReport,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}