{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist } from \"./data\";\nimport { tenants } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state to check if modal is open\n\n  const [modalOpen, setModalOpen] = useState(false); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //function to update tenantsState\n\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenants.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.checked = !checklistQuestion.checked;\n    const remainingQuestions = tenantFbChecklist.filter(question => {\n      return question.id !== questionId;\n    });\n    const newTenantChecklist = [...remainingQuestions, checklistQuestion]; //update tenantObject\n\n    tenantObject[fbChecklist] = newTenantChecklist; //get tenants array without tenantObject\n\n    const remainingTenants = tenants.filter(tenant => {\n      return tenant.tenantid !== tenantId;\n    }); //update state with newTenantObject\n\n    setTenantsState([...remainingTenants, tenantObject]);\n  }; //function to update audits state\n\n\n  const updateAudits = () => {}; //functions to change modalOpen state\n\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      modalOpen,\n      setModalOpen,\n      openModal,\n      closeModal,\n      tenantsState,\n      setTenantsState,\n      updateFbChecklistChecked,\n      fbChecklistState,\n      setFbChecklistState\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"e8A3oHoSKKJIXllXo2ToaJFKBEQ=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","audits","fbChecklist","tenants","Context","ContextProvider","props","auditsState","setAuditsState","tenantsState","setTenantsState","modalOpen","setModalOpen","fbChecklistState","setFbChecklistState","updateFbChecklistChecked","tenantId","questionId","tenantObject","find","tenant","tenantid","tenantFbChecklist","checklistQuestion","question","id","checked","remainingQuestions","filter","newTenantChecklist","remainingTenants","updateAudits","openModal","closeModal","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,QAApC;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,OAAO,MAAMC,OAAO,gBAAGJ,aAAa,EAA7B;AAEP,OAAO,MAAMK,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACxC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAACE,MAAD,CAA9C,CAFwC,CAGxC;;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAACI,OAAD,CAAhD,CAJwC,CAKxC;;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C,CANwC,CAOxC;;AACA,QAAM,CAACc,gBAAD,EAAmBC,mBAAnB,IAA0Cf,QAAQ,CAACG,WAAD,CAAxD,CARwC,CAUxC;;AACA,QAAMa,wBAAwB,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AACzD;AACA,UAAMC,YAAY,GAAGf,OAAO,CAACgB,IAAR,CAAcC,MAAD,IAAY;AAC5C,aAAOA,MAAM,CAACC,QAAP,KAAoBL,QAA3B;AACD,KAFoB,CAArB,CAFyD,CAKzD;;AACA,UAAMM,iBAAiB,GAAGJ,YAAY,CAAChB,WAAvC,CANyD,CAOzD;;AACA,UAAMqB,iBAAiB,GAAGD,iBAAiB,CAACH,IAAlB,CAAwBK,QAAD,IAAc;AAC7D,aAAOA,QAAQ,CAACC,EAAT,KAAgBR,UAAvB;AACD,KAFyB,CAA1B,CARyD,CAWzD;;AACAM,IAAAA,iBAAiB,CAACG,OAAlB,GAA4B,CAACH,iBAAiB,CAACG,OAA/C;AAEA,UAAMC,kBAAkB,GAAGL,iBAAiB,CAACM,MAAlB,CAA0BJ,QAAD,IAAc;AAChE,aAAOA,QAAQ,CAACC,EAAT,KAAgBR,UAAvB;AACD,KAF0B,CAA3B;AAIA,UAAMY,kBAAkB,GAAG,CAAC,GAAGF,kBAAJ,EAAwBJ,iBAAxB,CAA3B,CAlByD,CAmBzD;;AACAL,IAAAA,YAAY,CAAChB,WAAD,CAAZ,GAA4B2B,kBAA5B,CApByD,CAqBzD;;AACA,UAAMC,gBAAgB,GAAG3B,OAAO,CAACyB,MAAR,CAAgBR,MAAD,IAAY;AAClD,aAAOA,MAAM,CAACC,QAAP,KAAoBL,QAA3B;AACD,KAFwB,CAAzB,CAtByD,CAyBzD;;AACAN,IAAAA,eAAe,CAAC,CAAC,GAAGoB,gBAAJ,EAAsBZ,YAAtB,CAAD,CAAf;AACD,GA3BD,CAXwC,CAwCxC;;;AACA,QAAMa,YAAY,GAAG,MAAM,CAAE,CAA7B,CAzCwC,CA0CxC;;;AACA,QAAMC,SAAS,GAAG,MAAM;AACtBpB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAGA,QAAMqB,UAAU,GAAG,MAAM;AACvBrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAIA,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,SADK;AAELC,MAAAA,YAFK;AAGLoB,MAAAA,SAHK;AAILC,MAAAA,UAJK;AAKLxB,MAAAA,YALK;AAMLC,MAAAA,eANK;AAOLK,MAAAA,wBAPK;AAQLF,MAAAA,gBARK;AASLC,MAAAA;AATK,KADT;AAAA,cAaGR,KAAK,CAAC4B;AAbT;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnEM;;GAAM7B,e;;KAAAA,e","sourcesContent":["import React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist } from \"./data\";\nimport { tenants } from \"./data\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state to check if modal is open\n  const [modalOpen, setModalOpen] = useState(false);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n\n  //function to update tenantsState\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenants.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.checked = !checklistQuestion.checked;\n\n    const remainingQuestions = tenantFbChecklist.filter((question) => {\n      return question.id !== questionId;\n    });\n\n    const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    //update tenantObject\n    tenantObject[fbChecklist] = newTenantChecklist;\n    //get tenants array without tenantObject\n    const remainingTenants = tenants.filter((tenant) => {\n      return tenant.tenantid !== tenantId;\n    });\n    //update state with newTenantObject\n    setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //function to update audits state\n  const updateAudits = () => {};\n  //functions to change modalOpen state\n  const openModal = () => {\n    setModalOpen(true);\n  };\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        modalOpen,\n        setModalOpen,\n        openModal,\n        closeModal,\n        tenantsState,\n        setTenantsState,\n        updateFbChecklistChecked,\n        fbChecklistState,\n        setFbChecklistState,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}