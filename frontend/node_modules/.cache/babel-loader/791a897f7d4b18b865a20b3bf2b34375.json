{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //backend calling\n  const API_URL = \"http://localhost:8080\";\n\n  const getFbChecklistQuestions = (tenantId, category) => {\n    return axios.post(`${API_URL}/a/auditchecklist/${tenantId}/fbchecklist/${category}`);\n  }; //state to keep track of audit\n\n\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //function to update tenantsState\n\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //function to update audits state\n\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to close and open modal\n\n\n  const openQuestionModal = questionId => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  const closeQuestionModal = questionId => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      openQuestionModal,\n      closeQuestionModal,\n      tenantsState,\n      setTenantsState,\n      updateFbChecklistChecked,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment,\n      getFbChecklistQuestions\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"NQDnxXSFSRTLfhCbo3NrE1vyQLo=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","audits","fbChecklist","tenants","institutions","axios","Context","ContextProvider","props","API_URL","getFbChecklistQuestions","tenantId","category","post","auditsState","setAuditsState","tenantsState","setTenantsState","fbChecklistState","setFbChecklistState","institutionsState","setInstitutionstate","comment","setComment","updateFbChecklistChecked","questionId","tenantObject","find","tenant","tenantid","tenantFbChecklist","checklistQuestion","question","id","checked","console","log","updateAudit","type","tenantname","status","score","reduce","total","prevAudits","institution","resetTenantFbChecklist","forEach","openQuestionModal","modalOpen","closeQuestionModal","updateTenantComment","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //backend calling\n  const API_URL = \"http://localhost:8080\";\n\n  const getFbChecklistQuestions = (tenantId, category) => {\n    return axios.post(\n      `${API_URL}/a/auditchecklist/${tenantId}/fbchecklist/${category}`\n    );\n  };\n\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n  //function to update tenantsState\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantid\n    );\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n\n    setAuditsState((prevAudits) => {\n      return [\n        ...prevAudits,\n        {\n          tenantid: tenantid,\n          type: type,\n          tenantname: tenantname,\n          // timeremaining: timeremaining,\n          status: status,\n          // date: date,\n          institution: tenantObject.institution,\n          score: score,\n        },\n      ];\n    });\n  };\n\n  //function to reset tenant's fb checklist checked values\n  const resetTenantFbChecklist = (tenantId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //reset each checked to false\n    tenantFbChecklist.forEach((question) => {\n      question.checked = false;\n    });\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //functions to close and open modal\n  const openQuestionModal = (questionId) => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n  const closeQuestionModal = (questionId) => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  //functions to update tenant comment property\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        openQuestionModal,\n        closeQuestionModal,\n        tenantsState,\n        setTenantsState,\n        updateFbChecklistChecked,\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n        resetTenantFbChecklist,\n        comment,\n        setComment,\n        updateTenantComment,\n        getFbChecklistQuestions,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}