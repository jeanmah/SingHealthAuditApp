{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080\";\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\nexport const SESSION_TOKEN = \"SESSION_TOKEN\";\n\nclass AuthenticationService {\n  // executeJwtAuthenticationService(username, password) {\n  //   console.log(username);\n  //   return axios.post(`${API_URL}/authenticateP`, {\n  //     username,\n  //     password,\n  //   });\n  // }\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  } // registerSuccessfulLogin(username, password) {\n  //     //console.log('registerSuccessfulLogin')\n  //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  //     this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n  // }\n\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(SESSION_TOKEN, this.createJWTToken(token));\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return \"Bearer \" + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(SESSION_TOKEN);\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    window.location.reload();\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    console.log(user);\n    if (user === null) return false;\n    console.log(\"start page\");\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token; // console.log(\"token\")\n        // console.log(token)\n      }\n\n      return config;\n    });\n  }\n\n  getStoredAxiosInterceptor() {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = sessionStorage.getItem(SESSION_TOKEN);\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","SESSION_TOKEN","AuthenticationService","executeJwtAuthenticationService","username","password","post","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","createJWTToken","setupAxiosInterceptors","logout","removeItem","window","location","reload","isUserLoggedIn","user","getItem","console","log","getLoggedInUserName","interceptors","request","use","config","headers","authorization","getStoredAxiosInterceptor"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;;AACP,MAAMC,qBAAN,CAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOP,KAAK,CAACQ,IAAN,CAAY,GAAEP,OAAQ,eAAtB,EAAsC;AAC3CK,MAAAA,QAD2C;AAE3CC,MAAAA;AAF2C,KAAtC,CAAP;AAID,GAbyB,CAe1B;AACA;AACA;AACA;AACA;;;AAEAE,EAAAA,6BAA6B,CAACH,QAAD,EAAWI,KAAX,EAAkB;AAC7CC,IAAAA,cAAc,CAACC,OAAf,CAAuBV,gCAAvB,EAAyDI,QAAzD;AACAK,IAAAA,cAAc,CAACC,OAAf,CAAuBT,aAAvB,EAAsC,KAAKU,cAAL,CAAoBH,KAApB,CAAtC;AACA,SAAKI,sBAAL,CAA4B,KAAKD,cAAL,CAAoBH,KAApB,CAA5B;AACD;;AAEDG,EAAAA,cAAc,CAACH,KAAD,EAAQ;AACpB,WAAO,YAAYA,KAAnB;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACPJ,IAAAA,cAAc,CAACK,UAAf,CAA0Bb,aAA1B;AACAQ,IAAAA,cAAc,CAACK,UAAf,CAA0Bd,gCAA1B;AACAe,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,QAAIC,IAAI,GAAGV,cAAc,CAACW,OAAf,CAAuBpB,gCAAvB,CAAX;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnBE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,QAAIJ,IAAI,GAAGV,cAAc,CAACW,OAAf,CAAuBpB,gCAAvB,CAAX;AACA,QAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACD;;AAEDP,EAAAA,sBAAsB,CAACJ,KAAD,EAAQ;AAC5BV,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzC,UAAI,KAAKT,cAAL,EAAJ,EAA2B;AACzBS,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BrB,KAA/B,CADyB,CAEzB;AACA;AACD;;AACD,aAAOmB,MAAP;AACD,KAPD;AAQD;;AAEDG,EAAAA,yBAAyB,GAAG;AAC1BhC,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzC,UAAI,KAAKT,cAAL,EAAJ,EAA2B;AACzBS,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BpB,cAAc,CAACW,OAAf,CAAuBnB,aAAvB,CAA/B;AACD;;AACD,aAAO0B,MAAP;AACD,KALD;AAMD;;AAtEyB;;AAyE5B,eAAe,IAAIzB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080\";\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\nexport const SESSION_TOKEN = \"SESSION_TOKEN\";\nclass AuthenticationService {\n  // executeJwtAuthenticationService(username, password) {\n  //   console.log(username);\n  //   return axios.post(`${API_URL}/authenticateP`, {\n  //     username,\n  //     password,\n  //   });\n  // }\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password,\n    });\n  }\n\n  // registerSuccessfulLogin(username, password) {\n  //     //console.log('registerSuccessfulLogin')\n  //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  //     this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n  // }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(SESSION_TOKEN, this.createJWTToken(token));\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return \"Bearer \" + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(SESSION_TOKEN);\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    window.location.reload();\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    console.log(user);\n    if (user === null) return false;\n    console.log(\"start page\");\n\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use((config) => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n        // console.log(\"token\")\n        // console.log(token)\n      }\n      return config;\n    });\n  }\n\n  getStoredAxiosInterceptor() {\n    axios.interceptors.request.use((config) => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = sessionStorage.getItem(SESSION_TOKEN);\n      }\n      return config;\n    });\n  }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}