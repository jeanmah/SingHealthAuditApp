{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/SingHealthAuditApp/frontend/src/components/ChatEntriesCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Context } from '../Context';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Chat from \"../pages/Chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatEntriesCards = () => {\n  _s();\n\n  const {\n    chatEntriesOfUserState,\n    setChatEntriesOfUserState\n  } = useContext(Context);\n  console.log(\"chatEntries: \" + chatEntriesOfUserState);\n  console.log(\"dict: \" + chatEntriesOfUserState[2]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chatEntriesOfUserState && chatEntriesOfUserState.map((entry, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AccordionDetails, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Chat Entry ID: \", entry.chat_entry_id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Date: \", entry.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Message Body: \", entry.messageBody]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Sender ID: \", entry.sender_id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Subject:\", entry.subject]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Time: \", entry.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Attachments: \", entry.attachments]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(AccordionActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            color: \"primary\",\n            children: \"Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 15\n      }, this);\n    }) // for (var key in Object.keys(chatEntriesOfUserState)) {\n    //   if (chatEntriesOfUserState[key].length === 0) {\n    //     return (\n    //       <React.Fragment>\n    //         <AccordionDetails>\n    //           <Typography>\n    //             No message.\n    //           </Typography>\n    //         </AccordionDetails>\n    //       </React.Fragment>\n    //     )\n    //   } else {\n    //     chatEntriesOfUserState.map((entry, index) => {\n    //     //console.log(\"chatEntry1: \" + chatEntriesOfUserState[0]);\n    //       return (\n    //         <React.Fragment key={index}>\n    //           <AccordionDetails>\n    //             <Typography>\n    //               <div>Chat Entry ID: {entry.chat_entry_id}</div>\n    //               <div>Date: {entry.date}</div>\n    //               <div>Message Body: {entry.messageBody}</div>\n    //               <div>Sender ID: {entry.sender_id}</div>\n    //               <div>Subject:{entry.subject}</div>\n    //               <div>Time: {entry.time}</div>\n    //               <div>Attachments: {entry.attachments}</div>\n    //               <br />\n    //             </Typography>\n    //           </AccordionDetails>\n    //         </React.Fragment>\n    //       );}\n    //     )\n    //   }\n    // }\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatEntriesCards, \"whZ+qeWAD3NiwUWIw186Vjo8r/8=\");\n\n_c = ChatEntriesCards;\nexport default ChatEntriesCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatEntriesCards\");","map":{"version":3,"sources":["/Users/mac/Documents/SingHealthAuditApp/frontend/src/components/ChatEntriesCard.js"],"names":["React","useContext","useEffect","useState","Context","Accordion","AccordionSummary","AccordionDetails","Typography","ExpandMoreIcon","AccordionActions","Chip","Button","Divider","Chat","ChatEntriesCards","chatEntriesOfUserState","setChatEntriesOfUserState","console","log","map","entry","index","chat_entry_id","date","messageBody","sender_id","subject","time","attachments"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,sBAAF;AAA0BC,IAAAA;AAA1B,MAAwDhB,UAAU,CAACG,OAAD,CAAxE;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBH,sBAA9B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAWH,sBAAsB,CAAC,CAAD,CAA7C;AACA,sBACE;AAAA,cACGA,sBAAsB,IAAKA,sBAAsB,CAACI,GAAvB,CAA2B,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACnE,0BACE,QAAC,KAAD,CAAO,QAAP;AAAA,gCACE,QAAC,gBAAD;AAAA,iCACE,QAAC,UAAD;AAAA,oCACE;AAAA,4CAAqBD,KAAK,CAACE,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,mCAAYF,KAAK,CAACG,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA,2CAAoBH,KAAK,CAACI,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAA,wCAAiBJ,KAAK,CAACK,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAA,qCAAcL,KAAK,CAACM,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAA,mCAAYN,KAAK,CAACO,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE;AAAA,0CAAmBP,KAAK,CAACQ,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE;AAAA;AAAA;AAAA;AAAA,oBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE,QAAC,gBAAD;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,OAAb;AAAqB,YAAA,KAAK,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAbF,eAkBE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA,SAAqBP,KAArB;AAAA;AAAA;AAAA;AAAA,cADF;AAqBG,KAtBmB,CAAL,CAyBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1DJ;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD,CAnED;;GAAMP,gB;;KAAAA,gB;AAqEN,eAAeA,gBAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Context } from '../Context';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Chat from \"../pages/Chat\";\n\nconst ChatEntriesCards = () => {\n  const { chatEntriesOfUserState, setChatEntriesOfUserState } = useContext(Context);\n  console.log(\"chatEntries: \" + chatEntriesOfUserState);\n  console.log(\"dict: \" + chatEntriesOfUserState[2]);\n  return (\n    <div>\n      {chatEntriesOfUserState && (chatEntriesOfUserState.map((entry, index) => {\n            return (\n              <React.Fragment key={index}>\n                <AccordionDetails>\n                  <Typography>\n                    <div>Chat Entry ID: {entry.chat_entry_id}</div>\n                    <div>Date: {entry.date}</div>\n                    <div>Message Body: {entry.messageBody}</div>\n                    <div>Sender ID: {entry.sender_id}</div>\n                    <div>Subject:{entry.subject}</div>\n                    <div>Time: {entry.time}</div>\n                    <div>Attachments: {entry.attachments}</div>\n                    <br />\n                  </Typography>\n                </AccordionDetails>\n                <AccordionActions>\n                  <Button size=\"small\" color=\"primary\">\n                    Reply\n                  </Button>\n                </AccordionActions>\n                <Divider />\n              </React.Fragment>\n            );}\n          )\n          \n        // for (var key in Object.keys(chatEntriesOfUserState)) {\n        //   if (chatEntriesOfUserState[key].length === 0) {\n        //     return (\n        //       <React.Fragment>\n        //         <AccordionDetails>\n        //           <Typography>\n        //             No message.\n        //           </Typography>\n        //         </AccordionDetails>\n        //       </React.Fragment>\n        //     )\n        //   } else {\n        //     chatEntriesOfUserState.map((entry, index) => {\n        //     //console.log(\"chatEntry1: \" + chatEntriesOfUserState[0]);\n        //       return (\n        //         <React.Fragment key={index}>\n        //           <AccordionDetails>\n        //             <Typography>\n        //               <div>Chat Entry ID: {entry.chat_entry_id}</div>\n        //               <div>Date: {entry.date}</div>\n        //               <div>Message Body: {entry.messageBody}</div>\n        //               <div>Sender ID: {entry.sender_id}</div>\n        //               <div>Subject:{entry.subject}</div>\n        //               <div>Time: {entry.time}</div>\n        //               <div>Attachments: {entry.attachments}</div>\n        //               <br />\n        //             </Typography>\n        //           </AccordionDetails>\n        //         </React.Fragment>\n        //       );}\n        //     )\n        //   }\n        // }\n      )}\n    </div>\n  )\n}\n\nexport default ChatEntriesCards;"]},"metadata":{},"sourceType":"module"}