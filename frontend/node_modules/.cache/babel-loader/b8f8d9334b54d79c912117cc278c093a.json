{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/SingHealthAuditApp/frontend/src/pages/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Typography, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Context } from \"../Context\";\nimport Navbar from \"../Navbar\";\nimport useStyles from \"../styles\";\nimport { FormGroup } from \"@material-ui/core\";\nimport ChatCards from \"../components/ChatCards\";\nimport ChatEntriesCards from \"../components/ChatEntriesCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  const {\n    setAllChatsOfUserState,\n    allChatsOfUserState,\n    getAllChatsOfUser,\n    setChatEntriesOfUserState,\n    chatEntriesOfUserState,\n    getChatEntriesOfUser,\n    postCreateNewChat\n  } = useContext(Context);\n  const [allChatsState, setAllChatsState] = useState([]);\n  const styles = useStyles();\n  const chatsArray = [];\n  const chatEntriesArray = [];\n  const chatsEntriesDict = {};\n  const parentChatId = \"2\";\n  const numLastestChatEntries = \"1\";\n  useEffect(() => {\n    //getAllChatsOfUser();\n    async function getResponse() {\n      try {\n        await getAllChatsOfUser().then(response => {\n          console.log(\"allChatsOfUser: \" + response.data);\n          response.data.map(chat => {\n            //console.log(chat);\n            let newChat = {};\n            newChat.chat_id = chat.chat_id;\n            newChat.tenant_id = chat.tenant_id;\n            newChat.auditor_id = chat.auditor_id;\n\n            if (chat.messages.messages) {\n              newChat.messages = [...chat.messages.messages];\n            } else {\n              newChat.messages = [\"No message\"];\n            }\n\n            ;\n            chatsArray.push(newChat);\n            console.log(newChat);\n          });\n          console.log(chatsArray);\n          setAllChatsOfUserState(chatsArray);\n        });\n      } catch {\n        console.log(\"Failed to retrive allChatsOfUser\");\n      }\n\n      try {\n        await getChatEntriesOfUser(parentChatId).then(response => {\n          console.log(\"chatEntriesOfUser: \" + response.data);\n          console.log(response.data[0]);\n          console.log(response.data[1]);\n          response.data.map(entry => {\n            console.log(\"entry: \" + entry);\n            chatEntriesArray.push(entry);\n          });\n          console.log(\"chatEntriedArray: \" + chatEntriesArray);\n          setChatEntriesOfUserState(chatEntriesArray);\n          console.log(\"chatEntriesState: \" + chatEntriesOfUserState);\n        });\n      } catch {\n        console.log(\"Failed to retrive chatEntriesOfUser\");\n      }\n    }\n\n    getResponse();\n  }, []);\n  console.log(allChatsOfUserState);\n\n  function handleClick() {\n    let tenant_id = \"1007\";\n    let auditor_id = \"1003\";\n    console.log(\"Chat calling postNewChat\");\n    postCreateNewChat(auditor_id, tenant_id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: styles.main,\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      align: \"center\",\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      align: \"center\",\n      variant: \"outlined\",\n      color: \"primary\",\n      className: styles.buttons,\n      fullWidth: true,\n      onClick: () => handleClick(),\n      children: \"New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      align: \"center\",\n      children: \"All Chats of the User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatCards, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"/exgd+cTBctX5JzMXRU7qudiTIc=\", false, function () {\n  return [useStyles];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/mac/Documents/SingHealthAuditApp/frontend/src/pages/Chat.js"],"names":["React","useEffect","useContext","useState","Link","Typography","Button","axios","Context","Navbar","useStyles","FormGroup","ChatCards","ChatEntriesCards","Chat","setAllChatsOfUserState","allChatsOfUserState","getAllChatsOfUser","setChatEntriesOfUserState","chatEntriesOfUserState","getChatEntriesOfUser","postCreateNewChat","allChatsState","setAllChatsState","styles","chatsArray","chatEntriesArray","chatsEntriesDict","parentChatId","numLastestChatEntries","getResponse","then","response","console","log","data","map","chat","newChat","chat_id","tenant_id","auditor_id","messages","push","entry","handleClick","main","buttons"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Typography, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\n\nimport { Context } from \"../Context\";\nimport Navbar from \"../Navbar\";\nimport useStyles from \"../styles\";\nimport { FormGroup } from \"@material-ui/core\";\nimport ChatCards from \"../components/ChatCards\";\nimport ChatEntriesCards from \"../components/ChatEntriesCard\";\n\nfunction Chat() {\n\n  const {\n    setAllChatsOfUserState,\n    allChatsOfUserState,\n    getAllChatsOfUser,\n    setChatEntriesOfUserState,\n    chatEntriesOfUserState,\n    getChatEntriesOfUser,\n    postCreateNewChat,\n  } = useContext(Context);\n\n  const [allChatsState, setAllChatsState] = useState([]);\n  const styles = useStyles();\n  const chatsArray = [];\n  const chatEntriesArray = [];\n  const chatsEntriesDict = {};\n\n  const parentChatId = \"2\";\n  const numLastestChatEntries = \"1\";\n\n  useEffect(() => {\n    //getAllChatsOfUser();\n    async function getResponse() {\n      try{\n        await getAllChatsOfUser().then((response) => {\n          console.log(\"allChatsOfUser: \" + response.data);\n          response.data.map((chat) => {\n            //console.log(chat);\n            let newChat = {};\n            newChat.chat_id = chat.chat_id;\n            newChat.tenant_id = chat.tenant_id;\n            newChat.auditor_id = chat.auditor_id;\n            if (chat.messages.messages) {\n              newChat.messages = [...chat.messages.messages];\n            } else {\n              newChat.messages = [\"No message\"];\n            };\n            chatsArray.push(newChat);\n            console.log(newChat);\n          });\n          console.log(chatsArray);\n          setAllChatsOfUserState(chatsArray);\n        });\n      } catch {\n        console.log(\"Failed to retrive allChatsOfUser\");\n      }\n\n      try {\n        await getChatEntriesOfUser(parentChatId).then((response) => {\n          console.log(\"chatEntriesOfUser: \" + response.data);\n          console.log(response.data[0]);\n          console.log(response.data[1]);\n          response.data.map((entry) => {\n            console.log(\"entry: \" + entry);\n            chatEntriesArray.push(entry);\n          })\n          console.log(\"chatEntriedArray: \" + chatEntriesArray);\n          setChatEntriesOfUserState(chatEntriesArray);\n          console.log(\"chatEntriesState: \" + chatEntriesOfUserState);\n        })\n      } catch {\n        console.log(\"Failed to retrive chatEntriesOfUser\")\n      }\n    }\n    getResponse();\n  }, []);\n\n  console.log(allChatsOfUserState);\n\n  function handleClick() {\n    let tenant_id = \"1007\";\n    let auditor_id = \"1003\";\n    console.log(\"Chat calling postNewChat\");\n    postCreateNewChat(auditor_id, tenant_id);\n  }\n\n  return (\n    <main className={styles.main}>\n      <Navbar />\n      <br />\n      <Typography variant=\"h3\" align=\"center\">Chat</Typography>\n      <Button \n        align=\"center\"\n        variant=\"outlined\"\n        color=\"primary\"\n        className={styles.buttons}\n        fullWidth\n        onClick={() => handleClick()}\n      >\n        New Chat\n      </Button>\n      <br />\n      <br />\n      <Typography align=\"center\">All Chats of the User</Typography>\n      <ChatCards />\n      <br />\n      <br />\n    </main>\n  )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}