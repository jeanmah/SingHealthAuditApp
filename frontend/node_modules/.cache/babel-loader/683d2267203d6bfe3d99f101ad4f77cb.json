{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport AuthenticationService from './AuthenticationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n\n  const getAccountInfo = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"this is calling getAccountInfo\");\n    return axios.get(`${API_URL}/account/getUserProfile`, {\n      params: {}\n    }).then(response => {\n      console.log(\"this is account response\", response.data);\n      setAccountState(response.data);\n    }).catch(() => {\n      console.log(\"account info retrieval failed\");\n    });\n  };\n\n  const getFbChecklistQuestions = useCallback(() => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios.get(`${API_URL}/report/getAllQuestions`, {\n      params: {\n        type: \"FB\"\n      }\n    }).then(response => {\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []);\n  const submitFbReport = useCallback((tenantid, fbreport) => {\n    console.log(JSON.stringify(fbreport));\n    console.log(\"reached here\");\n\n    let FormData = require(\"form-data\");\n\n    let formdata = new FormData();\n    formdata.append(\"checklist\", JSON.stringify(fbreport));\n    return axios.post(`${API_URL}/report/postReportSubmission?type=FB&tenant_id=${tenantid}&remarks=`, formdata, {\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`\n      } // params: { type: \"FB\", tenant_id: t_id, remarks: \"\" },\n      // data: formdata,\n\n    }).then(response => {\n      console.log(response);\n\n      if (response.status === 200) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: `/tenant/${tenantid}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }, this);\n      }\n    }).catch(() => {\n      console.log(\"Failed FB report submission\");\n    });\n  }); //FRONTEND STATES AND FUNCTIONS\n  //state for report\n\n  const [fbReportState, setFbReportState] = useState([]); //state to keep track of audit\n\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state for account\n\n  const [accountState, setAccountState] = useState([]); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //function to prepare report state\n\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist); //create temporary array\n\n    let array = [];\n    checklist.forEach(question => {\n      const {\n        fb_qn_id\n      } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: false,\n        severity: 0,\n        remarks: \"\",\n        images: \"\"\n      });\n    }); //set fbreportstate to array\n\n    setFbReportState(array);\n    console.log(\"created fb report\");\n    console.log(array);\n  }, []); //function to update audits state\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to close and open modal\n\n\n  const openQuestionModal = questionId => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  const closeQuestionModal = questionId => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      openQuestionModal,\n      closeQuestionModal,\n      tenantsState,\n      setTenantsState,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment,\n      getFbChecklistQuestions,\n      accountState,\n      setAccountState,\n      getAccountInfo,\n      fbReportState,\n      setFbReportState,\n      createFbReportState,\n      submitFbReport\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"kSkmrZVhf0uU3Dn85/fMBytlXLQ=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/mac/Documents/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","useCallback","audits","fbChecklist","tenants","institutions","axios","Redirect","AuthenticationService","Context","ContextProvider","props","API_URL","getAccountInfo","getStoredAxiosInterceptor","console","log","get","params","then","response","data","setAccountState","catch","getFbChecklistQuestions","type","setFbChecklistState","createFbReportState","submitFbReport","tenantid","fbreport","JSON","stringify","FormData","require","formdata","append","post","headers","_boundary","status","fbReportState","setFbReportState","auditsState","setAuditsState","tenantsState","setTenantsState","fbChecklistState","institutionsState","setInstitutionstate","accountState","comment","setComment","checklist","array","forEach","question","fb_qn_id","push","qn_id","severity","remarks","images","updateAudit","tenantname","tenantObject","find","tenant","tenantFbChecklist","score","reduce","total","checked","prevAudits","institution","resetTenantFbChecklist","tenantId","openQuestionModal","questionId","checklistQuestion","id","modalOpen","closeQuestionModal","updateTenantComment","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport AuthenticationService from './AuthenticationService';\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n\n  const getAccountInfo = () => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    console.log(\"this is calling getAccountInfo\");\n    return axios\n      .get(`${API_URL}/account/getUserProfile`, {\n        params: {},\n      })\n      .then((response) => {\n        console.log(\"this is account response\", response.data);\n        setAccountState(response.data);\n      })\n      .catch(() => {\n        console.log(\"account info retrieval failed\");\n      });\n  }\n\n  const getFbChecklistQuestions = useCallback(() => {\n    AuthenticationService.getStoredAxiosInterceptor();\n    return axios\n      .get(`${API_URL}/report/getAllQuestions`, {\n        params: { type: \"FB\" },\n      })\n      .then((response) => {\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  const submitFbReport = useCallback((tenantid, fbreport) => {\n    console.log(JSON.stringify(fbreport));\n    console.log(\"reached here\");\n    let FormData = require(\"form-data\");\n    let formdata = new FormData();\n    formdata.append(\"checklist\", JSON.stringify(fbreport));\n    return axios\n      .post(\n        `${API_URL}/report/postReportSubmission?type=FB&tenant_id=${tenantid}&remarks=`,\n        formdata,\n        {\n          headers: {\n            \"Content-Type\": `multipart/form-data; boundary=${formdata._boundary}`,\n          },\n          // params: { type: \"FB\", tenant_id: t_id, remarks: \"\" },\n          // data: formdata,\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        if (response.status === 200) {\n          return <Redirect to={`/tenant/${tenantid}`} />;\n        }\n      })\n      .catch(() => {\n        console.log(\"Failed FB report submission\");\n      });\n  });\n\n  //FRONTEND STATES AND FUNCTIONS\n  //state for report\n  const [fbReportState, setFbReportState] = useState([]);\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state for account\n  const [accountState, setAccountState] = useState([]);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n\n  //function to prepare report state\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist);\n    //create temporary array\n    let array = [];\n    checklist.forEach((question) => {\n      const { fb_qn_id } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: false,\n        severity: 0,\n        remarks: \"\",\n        images: \"\",\n      });\n    });\n    //set fbreportstate to array\n    setFbReportState(array);\n\n    console.log(\"created fb report\");\n    console.log(array);\n  }, []);\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantid\n    );\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n\n    setAuditsState((prevAudits) => {\n      return [\n        ...prevAudits,\n        {\n          tenantid: tenantid,\n          type: type,\n          tenantname: tenantname,\n          // timeremaining: timeremaining,\n          status: status,\n          // date: date,\n          institution: tenantObject.institution,\n          score: score,\n        },\n      ];\n    });\n  };\n\n  //function to reset tenant's fb checklist checked values\n  const resetTenantFbChecklist = (tenantId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //reset each checked to false\n    tenantFbChecklist.forEach((question) => {\n      question.checked = false;\n    });\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //functions to close and open modal\n  const openQuestionModal = (questionId) => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n  const closeQuestionModal = (questionId) => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  //functions to update tenant comment property\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        openQuestionModal,\n        closeQuestionModal,\n        tenantsState,\n        setTenantsState,\n\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n        resetTenantFbChecklist,\n        \n        comment,\n        setComment,\n        updateTenantComment,\n        getFbChecklistQuestions,\n\n        accountState,\n        setAccountState,\n        getAccountInfo,\n\n        fbReportState,\n        setFbReportState,\n        createFbReportState,\n        submitFbReport,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}