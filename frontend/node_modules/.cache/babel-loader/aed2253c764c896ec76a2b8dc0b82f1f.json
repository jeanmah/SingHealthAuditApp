{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n  const getFbChecklistQuestions = useCallback(() => {\n    return axios.get(`${API_URL}/report/getAllQuestions`, {\n      params: {\n        type: \"FB\"\n      }\n    }).then(response => {\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []);\n  const submitFbReport = useCallback(() => {}); //FRONTEND STATES AND FUNCTIONS\n  //state for report\n\n  const [fbReportState, setFbReportState] = useState([]); //state to keep track of audit\n\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //function to prepare report state\n\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist); //create temporary array\n\n    let array = [];\n    checklist.forEach(question => {\n      const {\n        fb_qn_id\n      } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: false\n      });\n    }); //set fbreportstate to array\n\n    setFbReportState(array);\n    console.log(\"created fb report\");\n    console.log(array);\n  }, []); //function to update audits state\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to close and open modal\n\n\n  const openQuestionModal = questionId => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  const closeQuestionModal = questionId => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      openQuestionModal,\n      closeQuestionModal,\n      tenantsState,\n      setTenantsState,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment,\n      getFbChecklistQuestions,\n      fbReportState,\n      setFbReportState,\n      createFbReportState,\n      submitFbReport\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"LAqhw5Vv0jAonUptSsnhFkRZIzI=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","useCallback","audits","fbChecklist","tenants","institutions","axios","Context","ContextProvider","props","API_URL","getFbChecklistQuestions","get","params","type","then","response","setFbChecklistState","data","createFbReportState","catch","console","log","submitFbReport","fbReportState","setFbReportState","auditsState","setAuditsState","tenantsState","setTenantsState","fbChecklistState","institutionsState","setInstitutionstate","comment","setComment","checklist","array","forEach","question","fb_qn_id","push","qn_id","status","updateAudit","tenantid","tenantname","tenantObject","find","tenant","tenantFbChecklist","score","reduce","total","checked","prevAudits","institution","resetTenantFbChecklist","tenantId","openQuestionModal","questionId","checklistQuestion","id","modalOpen","closeQuestionModal","updateTenantComment","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n\n  const getFbChecklistQuestions = useCallback(() => {\n    return axios\n      .get(`${API_URL}/report/getAllQuestions`, {\n        params: { type: \"FB\" },\n      })\n      .then((response) => {\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  const submitFbReport = useCallback(() => {});\n\n  //FRONTEND STATES AND FUNCTIONS\n  //state for report\n  const [fbReportState, setFbReportState] = useState([]);\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n\n  //function to prepare report state\n  const createFbReportState = useCallback((checklist, response) => {\n    console.log(checklist);\n    //create temporary array\n    let array = [];\n    checklist.forEach((question) => {\n      const { fb_qn_id } = question;\n      array.push({ qn_id: fb_qn_id, status: false });\n    });\n    //set fbreportstate to array\n    setFbReportState(array);\n    console.log(\"created fb report\");\n    console.log(array);\n  }, []);\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantid\n    );\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n\n    setAuditsState((prevAudits) => {\n      return [\n        ...prevAudits,\n        {\n          tenantid: tenantid,\n          type: type,\n          tenantname: tenantname,\n          // timeremaining: timeremaining,\n          status: status,\n          // date: date,\n          institution: tenantObject.institution,\n          score: score,\n        },\n      ];\n    });\n  };\n\n  //function to reset tenant's fb checklist checked values\n  const resetTenantFbChecklist = (tenantId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //reset each checked to false\n    tenantFbChecklist.forEach((question) => {\n      question.checked = false;\n    });\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //functions to close and open modal\n  const openQuestionModal = (questionId) => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n  const closeQuestionModal = (questionId) => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  //functions to update tenant comment property\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        openQuestionModal,\n        closeQuestionModal,\n        tenantsState,\n        setTenantsState,\n\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n        resetTenantFbChecklist,\n        comment,\n        setComment,\n        updateTenantComment,\n        getFbChecklistQuestions,\n\n        fbReportState,\n        setFbReportState,\n        createFbReportState,\n        submitFbReport,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}