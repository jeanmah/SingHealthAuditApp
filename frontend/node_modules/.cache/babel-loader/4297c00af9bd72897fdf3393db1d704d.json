{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/SingHealthAuditApp/frontend/src/pages/Chat.js\",\n    _s = $RefreshSig$();\n\nimport { Typography } from \"@material-ui/core\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Context } from '../Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  const {\n    chatId\n  } = useParams();\n  const [chatEntriesState, setChatEntriesState] = useState([]);\n  const {\n    getChatEntriesOfUser\n  } = useContext(Context);\n  useEffect(() => {\n    async function getResponse() {\n      try {\n        await getChatEntriesOfUser(chatId).then(response => {\n          //console.log(\"Chat: allChatsOfUser: \" + response.data);\n          setChatEntriesState(response.data); //console.log(\"state: \" + chatEntriesState);\n        });\n      } catch {\n        console.log(\"Failed to retrive allChatsOfUser\");\n      }\n    }\n\n    ;\n    getResponse();\n  }, []);\n  console.log(chatId);\n  console.log(typeof chatId);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chat Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Chat ID: \", chatId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), chatEntriesState.map((entry, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Chat Entry ID: \", entry.chat_entry_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Subject:\", entry.subject]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Sender ID: \", entry.sender_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Time: \", entry.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Date: \", entry.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Chat Entry ID: \", entry.chat_entry_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Chat Entry ID: \", entry.chat_entry_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Message Body: \", entry.messageBody]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Attachments: \", entry.attachments]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"2u/eMXk5cTu66OJrmqGFWTgioCY=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\n;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/mac/Documents/SingHealthAuditApp/frontend/src/pages/Chat.js"],"names":["Typography","React","useState","useEffect","useContext","useParams","Context","Chat","chatId","chatEntriesState","setChatEntriesState","getChatEntriesOfUser","getResponse","then","response","data","console","log","map","entry","index","chat_entry_id","subject","sender_id","time","date","messageBody","attachments"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,OAAT,QAAwB,YAAxB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAM;AAAEC,IAAAA;AAAF,MAAaH,SAAS,EAA5B;AACA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM;AAAES,IAAAA;AAAF,MAA2BP,UAAU,CAACE,OAAD,CAA3C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeS,WAAf,GAA6B;AAC3B,UAAG;AACD,cAAMD,oBAAoB,CAACH,MAAD,CAApB,CAA6BK,IAA7B,CAAmCC,QAAD,IAAc;AACpD;AACAJ,UAAAA,mBAAmB,CAACI,QAAQ,CAACC,IAAV,CAAnB,CAFoD,CAGpD;AACD,SAJK,CAAN;AAKD,OAND,CAME,MAAM;AACNC,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD;AACF;;AAAA;AACDL,IAAAA,WAAW;AACZ,GAbQ,EAaN,EAbM,CAAT;AAeAI,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOT,MAAnB;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BAAeA,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGC,gBAAgB,CAACS,GAAjB,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACtC,0BACE,QAAC,KAAD,CAAO,QAAP;AAAA,+BACE,QAAC,UAAD;AAAA,kCACE,QAAC,UAAD;AAAA,0CAA4BD,KAAK,CAACE,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,UAAD;AAAA,mCAAqBF,KAAK,CAACG,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,UAAD;AAAA,sCAAwBH,KAAK,CAACI,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,UAAD;AAAA,iCAAmBJ,KAAK,CAACK,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,UAAD;AAAA,iCAAmBL,KAAK,CAACM,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME,QAAC,UAAD;AAAA,0CAA4BN,KAAK,CAACE,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE,QAAC,UAAD;AAAA,0CAA4BF,KAAK,CAACE,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,eASE;AAAA;AAAA;AAAA;AAAA,kBATF,eAUE;AAAA;AAAA;AAAA;AAAA,kBAVF,eAWE;AAAA;AAAA;AAAA;AAAA,kBAXF,eAYE;AAAA,yCAAoBF,KAAK,CAACO,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZF,eAaE;AAAA,wCAAmBP,KAAK,CAACQ,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eAcE;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAAqBP,KAArB;AAAA;AAAA;AAAA;AAAA,cADF;AAoBD,KArBA,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GAnDQb,I;UACYF,S;;;KADZE,I;AAmDR;AAED,eAAeA,IAAf","sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { Context } from '../Context';\n\nfunction Chat() {\n  const { chatId } = useParams();\n  const [chatEntriesState, setChatEntriesState] = useState([]);\n  const { getChatEntriesOfUser } = useContext(Context);\n  \n  useEffect(() => {\n    async function getResponse() {\n      try{\n        await getChatEntriesOfUser(chatId).then((response) => {\n          //console.log(\"Chat: allChatsOfUser: \" + response.data);\n          setChatEntriesState(response.data);\n          //console.log(\"state: \" + chatEntriesState);\n        })\n      } catch {\n        console.log(\"Failed to retrive allChatsOfUser\");\n      }\n    };\n    getResponse();\n  }, []);\n\n  console.log(chatId);\n  console.log(typeof chatId);\n\n  return (\n    <main>\n      <div>Chat Page</div>\n      <div>Chat ID: {chatId}</div>\n      {chatEntriesState.map((entry, index) => {\n        return (\n          <React.Fragment key={index}>\n            <Typography>\n              <Typography>Chat Entry ID: {entry.chat_entry_id}</Typography>\n              <Typography>Subject:{entry.subject}</Typography>\n              <Typography>Sender ID: {entry.sender_id}</Typography>\n              <Typography>Time: {entry.time}</Typography>\n              <Typography>Date: {entry.date}</Typography>\n              <Typography>Chat Entry ID: {entry.chat_entry_id}</Typography>\n              <Typography>Chat Entry ID: {entry.chat_entry_id}</Typography>\n              \n              <div></div>\n              <div></div>\n              <div></div>\n              <div>Message Body: {entry.messageBody}</div>\n              <div>Attachments: {entry.attachments}</div>\n              <br />\n            </Typography>\n          </React.Fragment>\n        )\n      })}\n    </main>\n  )\n};\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}