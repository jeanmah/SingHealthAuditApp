{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Loading from \"./Loading\";\nimport Navbar from \"../Navbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\"; //styling for the fbchecklist page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(5, 0, 5, 0)\n  },\n  list: {\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\" // alignItems: \"center\",\n\n  },\n  button: {\n    color: \"#F15A22\",\n    fontWeight: \"medium\",\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nfunction FbChecklist() {\n  _s();\n\n  //use styles from function declared above\n  const classes = useStyles(); //get tenant id from url\n\n  const {\n    tenantId\n  } = useParams(); //Context\n\n  const {\n    getFbChecklistQuestions,\n    createFbReportState,\n    getUserInfo\n  } = useContext(Context); //state to update fb checklist questions\n\n  const [fbChecklistState, setFbChecklistState] = useState();\n  useEffect(() => {\n    //function to retrieve questions\n    async function getTenantName() {\n      const tenantName = await getUserInfo(tenantId).then(response => {\n        return response.data.store_name;\n      });\n    }\n\n    getFbChecklistQuestions().then(response => {\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: fbChecklistState ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: [tenantName, \" F&B Checklist\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          className: classes.list,\n          children: fbChecklistState.map((question, index) => {\n            const {\n              fb_qn_id,\n              requirement\n            } = question;\n            const labelId = `checkbox-list-secondary-label-${fb_qn_id}`;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Question, {\n                fb_qn_id: fb_qn_id,\n                requirement: requirement,\n                labelId: labelId\n              }, fb_qn_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button,\n          size: \"small\" // color=\"secondary\"\n          ,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)\n  }, void 0, false) // <div>\n  //   {fbChecklistState ? (\n  //     <>\n  //       <Navbar />\n  //       <div className=\"category-head\">\n  //         <h2>FB Checklist</h2>\n  //         {fbChecklistState.map((question, index) => {\n  //           const { fb_qn_id, requirement } = question;\n  //           return (\n  //             <Question\n  //               key={index}\n  //               fb_qn_id={fb_qn_id}\n  //               requirement={requirement}\n  //               tenantId={tenantId}\n  //             />\n  //           );\n  //         })}\n  //         <br />\n  //         {/* <Link to={`/tenant/${tenantId}`}> */}\n  //         <button\n  //           // onClick={() => {\n  //           //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n  //           //   resetTenantFbChecklist(tenantId);\n  //           // }}\n  //           onClick={() => submitFbReport(1006, fbReportState)}\n  //         >\n  //           Submit\n  //         </button>\n  //         {/* </Link> */}\n  //       </div>\n  //     </>\n  //   ) : (\n  //     <Loading />\n  //   )}\n  // </div>\n  ;\n}\n\n_s(FbChecklist, \"/F1bo9aUBj049W5rw5NvXfeA/08=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = FbChecklist;\nexport default FbChecklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"FbChecklist\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js"],"names":["React","useState","useContext","useEffect","useCallback","useParams","Question","Context","Loading","Navbar","makeStyles","List","Button","Grid","Typography","useStyles","theme","root","display","flexDirection","alignItems","padding","spacing","list","width","maxWidth","backgroundColor","palette","background","paper","button","color","fontWeight","FbChecklist","classes","tenantId","getFbChecklistQuestions","createFbReportState","getUserInfo","fbChecklistState","setFbChecklistState","getTenantName","tenantName","then","response","data","store_name","catch","console","log","map","question","index","fb_qn_id","requirement","labelId"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Loading from \"./Loading\";\nimport Navbar from \"../Navbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\n//styling for the fbchecklist page\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing(5, 0, 5, 0),\n  },\n  list: {\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\",\n\n    // alignItems: \"center\",\n  },\n  button: {\n    color: \"#F15A22\",\n    fontWeight: \"medium\",\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction FbChecklist() {\n  //use styles from function declared above\n  const classes = useStyles();\n  //get tenant id from url\n  const { tenantId } = useParams();\n\n  //Context\n  const {\n    getFbChecklistQuestions,\n    createFbReportState,\n    getUserInfo,\n  } = useContext(Context);\n\n  //state to update fb checklist questions\n  const [fbChecklistState, setFbChecklistState] = useState();\n\n  useEffect(() => {\n    //function to retrieve questions\n    async function getTenantName() {\n      const tenantName = await getUserInfo(tenantId).then((response) => {\n        return response.data.store_name;\n      });\n    }\n    getFbChecklistQuestions()\n      .then((response) => {\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  return (\n    <>\n      {fbChecklistState ? (\n        <>\n          <Navbar />\n          <Grid container className={classes.root}>\n            <Typography>{tenantName} F&B Checklist</Typography>\n            <List dense className={classes.list}>\n              {fbChecklistState.map((question, index) => {\n                const { fb_qn_id, requirement } = question;\n                const labelId = `checkbox-list-secondary-label-${fb_qn_id}`;\n                return (\n                  <>\n                    <Question\n                      key={fb_qn_id}\n                      fb_qn_id={fb_qn_id}\n                      requirement={requirement}\n                      labelId={labelId}\n                    />\n                  </>\n                );\n              })}\n            </List>\n            <Button\n              className={classes.button}\n              size=\"small\"\n              // color=\"secondary\"\n            >\n              Submit\n            </Button>\n          </Grid>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </>\n    // <div>\n    //   {fbChecklistState ? (\n    //     <>\n    //       <Navbar />\n    //       <div className=\"category-head\">\n    //         <h2>FB Checklist</h2>\n    //         {fbChecklistState.map((question, index) => {\n    //           const { fb_qn_id, requirement } = question;\n    //           return (\n    //             <Question\n    //               key={index}\n    //               fb_qn_id={fb_qn_id}\n    //               requirement={requirement}\n    //               tenantId={tenantId}\n    //             />\n    //           );\n    //         })}\n    //         <br />\n    //         {/* <Link to={`/tenant/${tenantId}`}> */}\n    //         <button\n    //           // onClick={() => {\n    //           //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n    //           //   resetTenantFbChecklist(tenantId);\n    //           // }}\n    //           onClick={() => submitFbReport(1006, fbReportState)}\n    //         >\n    //           Submit\n    //         </button>\n    //         {/* </Link> */}\n    //       </div>\n    //     </>\n    //   ) : (\n    //     <Loading />\n    //   )}\n    // </div>\n  );\n}\n\nexport default FbChecklist;\n"]},"metadata":{},"sourceType":"module"}