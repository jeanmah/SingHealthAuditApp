{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state to check if modal is open\n\n  const [modalOpen, setModalOpen] = useState(false); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //state of displayed comments\n\n  const [displayedComments, setDisplayedComments] = useState(\"\"); //function to update tenantsState\n\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //function to update audits state\n\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to change modalOpen state\n\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question to add comment\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update comment\n\n    checklistQuestion.comment = comment;\n    console.log(checklistQuestion.comment);\n    console.log(checklistQuestion); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      modalOpen,\n      setModalOpen,\n      openModal,\n      closeModal,\n      tenantsState,\n      setTenantsState,\n      updateFbChecklistChecked,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment,\n      displayedComments,\n      setDisplayedComments\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"uprlRzDPZw0lMK7AOhIsTjjZtNw=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","audits","fbChecklist","tenants","institutions","Context","ContextProvider","props","auditsState","setAuditsState","tenantsState","setTenantsState","modalOpen","setModalOpen","fbChecklistState","setFbChecklistState","institutionsState","setInstitutionstate","comment","setComment","displayedComments","setDisplayedComments","updateFbChecklistChecked","tenantId","questionId","tenantObject","find","tenant","tenantid","tenantFbChecklist","checklistQuestion","question","id","checked","console","log","updateAudit","type","tenantname","status","score","reduce","total","prevAudits","institution","resetTenantFbChecklist","forEach","openModal","closeModal","updateTenantComment","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,OAA9B,EAAuCC,YAAvC,QAA2D,QAA3D;;AAEA,OAAO,MAAMC,OAAO,gBAAGL,aAAa,EAA7B;AAEP,OAAO,MAAMM,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACxC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAACE,MAAD,CAA9C,CAFwC,CAGxC;;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAACI,OAAD,CAAhD,CAJwC,CAKxC;;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C,CANwC,CAOxC;;AACA,QAAM,CAACe,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,CAACG,WAAD,CAAxD,CARwC,CASxC;;AACA,QAAM,CAACc,iBAAD,EAAoBC,mBAApB,IAA2ClB,QAAQ,CAACK,YAAD,CAAzD,CAVwC,CAWxC;;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,EAAD,CAAtC,CAZwC,CAaxC;;AACA,QAAM,CAACqB,iBAAD,EAAoBC,oBAApB,IAA4CtB,QAAQ,CAAC,EAAD,CAA1D,CAdwC,CAgBxC;;AACA,QAAMuB,wBAAwB,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AACzD;AACA,UAAMC,YAAY,GAAGf,YAAY,CAACgB,IAAb,CAAmBC,MAAD,IAAY;AACjD,aAAOA,MAAM,CAACC,QAAP,KAAoBL,QAA3B;AACD,KAFoB,CAArB,CAFyD,CAKzD;;AACA,UAAMM,iBAAiB,GAAGJ,YAAY,CAACvB,WAAvC,CANyD,CAOzD;;AACA,UAAM4B,iBAAiB,GAAGD,iBAAiB,CAACH,IAAlB,CAAwBK,QAAD,IAAc;AAC7D,aAAOA,QAAQ,CAACC,EAAT,KAAgBR,UAAvB;AACD,KAFyB,CAA1B,CARyD,CAWzD;;AACAM,IAAAA,iBAAiB,CAACG,OAAlB,GAA4B,CAACH,iBAAiB,CAACG,OAA/C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYzB,YAAZ,EAbyD,CAezD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACD,GA7BD,CAjBwC,CAgDxC;;;AACA,QAAM0B,WAAW,GAAG,CAClBR,QADkB,EAElBS,IAFkB,EAGlBC,UAHkB,EAIlB;AACAC,EAAAA,MALkB,CAMlB;AANkB,OAOf;AACH,UAAMd,YAAY,GAAGf,YAAY,CAACgB,IAAb,CAClBC,MAAD,IAAYA,MAAM,CAACC,QAAP,KAAoBA,QADb,CAArB;AAGA,UAAMC,iBAAiB,GAAGJ,YAAY,CAACvB,WAAvC;AACA,QAAIsC,KAAK,GAAGX,iBAAiB,CAACY,MAAlB,CAAyB,CAACC,KAAD,EAAQX,QAAR,KAAqB;AACxD,UAAIA,QAAQ,CAACE,OAAT,KAAqB,IAAzB,EAA+B;AAC7BS,QAAAA,KAAK,IAAI,CAAT;AACD;;AACD,aAAOA,KAAP;AACD,KALW,EAKT,CALS,CAAZ;AAOAjC,IAAAA,cAAc,CAAEkC,UAAD,IAAgB;AAC7B,aAAO,CACL,GAAGA,UADE,EAEL;AACEf,QAAAA,QAAQ,EAAEA,QADZ;AAEES,QAAAA,IAAI,EAAEA,IAFR;AAGEC,QAAAA,UAAU,EAAEA,UAHd;AAIE;AACAC,QAAAA,MAAM,EAAEA,MALV;AAME;AACAK,QAAAA,WAAW,EAAEnB,YAAY,CAACmB,WAP5B;AAQEJ,QAAAA,KAAK,EAAEA;AART,OAFK,CAAP;AAaD,KAda,CAAd;AAeD,GAlCD,CAjDwC,CAqFxC;;;AACA,QAAMK,sBAAsB,GAAItB,QAAD,IAAc;AAC3C,UAAME,YAAY,GAAGf,YAAY,CAACgB,IAAb,CAClBC,MAAD,IAAYA,MAAM,CAACC,QAAP,KAAoBL,QADb,CAArB,CAD2C,CAI3C;;AACA,UAAMM,iBAAiB,GAAGJ,YAAY,CAACvB,WAAvC,CAL2C,CAM3C;;AACA2B,IAAAA,iBAAiB,CAACiB,OAAlB,CAA2Bf,QAAD,IAAc;AACtCA,MAAAA,QAAQ,CAACE,OAAT,GAAmB,KAAnB;AACD,KAFD,EAP2C,CAU3C;AACA;AACA;AACA;AACA;AACA;AACD,GAhBD,CAtFwC,CAwGxC;;;AACA,QAAMc,SAAS,GAAG,MAAM;AACtBlC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAGA,QAAMmC,UAAU,GAAG,MAAM;AACvBnC,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD,CA5GwC,CAgHxC;;;AACA,QAAMoC,mBAAmB,GAAG,CAAC1B,QAAD,EAAWC,UAAX,KAA0B;AACpD,UAAMC,YAAY,GAAGf,YAAY,CAACgB,IAAb,CAClBC,MAAD,IAAYA,MAAM,CAACC,QAAP,KAAoBL,QADb,CAArB,CADoD,CAIpD;;AACA,UAAMM,iBAAiB,GAAGJ,YAAY,CAACvB,WAAvC,CALoD,CAMpD;;AACA,UAAM4B,iBAAiB,GAAGD,iBAAiB,CAACH,IAAlB,CAAwBK,QAAD,IAAc;AAC7D,aAAOA,QAAQ,CAACC,EAAT,KAAgBR,UAAvB;AACD,KAFyB,CAA1B,CAPoD,CAUpD;;AACAM,IAAAA,iBAAiB,CAACZ,OAAlB,GAA4BA,OAA5B;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYL,iBAAiB,CAACZ,OAA9B;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYL,iBAAZ,EAboD,CAepD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,GA7BD;;AA+BA,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,SADK;AAELC,MAAAA,YAFK;AAGLkC,MAAAA,SAHK;AAILC,MAAAA,UAJK;AAKLtC,MAAAA,YALK;AAMLC,MAAAA,eANK;AAOLW,MAAAA,wBAPK;AAQLR,MAAAA,gBARK;AASLC,MAAAA,mBATK;AAULP,MAAAA,WAVK;AAWLC,MAAAA,cAXK;AAYL2B,MAAAA,WAZK;AAaLS,MAAAA,sBAbK;AAcL3B,MAAAA,OAdK;AAeLC,MAAAA,UAfK;AAgBL8B,MAAAA,mBAhBK;AAiBL7B,MAAAA,iBAjBK;AAkBLC,MAAAA;AAlBK,KADT;AAAA,cAsBGd,KAAK,CAAC2C;AAtBT;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA1KM;;GAAM5C,e;;KAAAA,e","sourcesContent":["import React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state to check if modal is open\n  const [modalOpen, setModalOpen] = useState(false);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n  //state of displayed comments\n  const [displayedComments, setDisplayedComments] = useState(\"\");\n\n  //function to update tenantsState\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantid\n    );\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n\n    setAuditsState((prevAudits) => {\n      return [\n        ...prevAudits,\n        {\n          tenantid: tenantid,\n          type: type,\n          tenantname: tenantname,\n          // timeremaining: timeremaining,\n          status: status,\n          // date: date,\n          institution: tenantObject.institution,\n          score: score,\n        },\n      ];\n    });\n  };\n\n  //function to reset tenant's fb checklist checked values\n  const resetTenantFbChecklist = (tenantId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //reset each checked to false\n    tenantFbChecklist.forEach((question) => {\n      question.checked = false;\n    });\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //functions to change modalOpen state\n  const openModal = () => {\n    setModalOpen(true);\n  };\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  //functions to update tenant comment property\n  const updateTenantComment = (tenantId, questionId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question to add comment\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update comment\n    checklistQuestion.comment = comment;\n    console.log(checklistQuestion.comment);\n    console.log(checklistQuestion);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        modalOpen,\n        setModalOpen,\n        openModal,\n        closeModal,\n        tenantsState,\n        setTenantsState,\n        updateFbChecklistChecked,\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n        resetTenantFbChecklist,\n        comment,\n        setComment,\n        updateTenantComment,\n        displayedComments,\n        setDisplayedComments,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}