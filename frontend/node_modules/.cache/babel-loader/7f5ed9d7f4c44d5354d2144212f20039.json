{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n\n  const prepareFbChecklistReport = checklist => {\n    let report = []; //iterate through eac checklist question\n\n    checklist.map(question => {\n      report = [...report, {\n        qn_id: question.fb_qn_id,\n        status: false\n      }];\n    });\n    return report;\n  };\n\n  const getFbChecklistQuestions = useCallback(() => {\n    return axios.get(`${API_URL}/report/getAllQuestions`, {\n      params: {\n        type: \"FB\"\n      }\n    }).then(response => {\n      console.log(response);\n      setFbChecklistState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []); //FRONTEND FUNCTIONS\n  //state for report\n\n  const [fbReportState, setFbReportState] = useState([]); //state to keep track of audit\n\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //function to prepare report state\n\n  const createFbReportState = useCallback(checklist => {\n    checklist.map(question => {\n      const {\n        fb_qn_id\n      } = question;\n      setFbReportState(...fbReportState, {\n        qn_id: fb_qn_id,\n        status: false\n      });\n    });\n  }, []); //function to update tenantsState\n\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //function to update audits state\n\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to close and open modal\n\n\n  const openQuestionModal = questionId => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  const closeQuestionModal = questionId => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      openQuestionModal,\n      closeQuestionModal,\n      tenantsState,\n      setTenantsState,\n      updateFbChecklistChecked,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment,\n      getFbChecklistQuestions,\n      prepareFbChecklistReport,\n      fbReportState,\n      setFbReportState\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"nAmDmSwwI2UYWJey5ErXCDYEACU=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","useCallback","audits","fbChecklist","tenants","institutions","axios","Context","ContextProvider","props","API_URL","prepareFbChecklistReport","checklist","report","map","question","qn_id","fb_qn_id","status","getFbChecklistQuestions","get","params","type","then","response","console","log","setFbChecklistState","data","catch","fbReportState","setFbReportState","auditsState","setAuditsState","tenantsState","setTenantsState","fbChecklistState","institutionsState","setInstitutionstate","comment","setComment","createFbReportState","updateFbChecklistChecked","tenantId","questionId","tenantObject","find","tenant","tenantid","tenantFbChecklist","checklistQuestion","id","checked","updateAudit","tenantname","score","reduce","total","prevAudits","institution","resetTenantFbChecklist","forEach","openQuestionModal","modalOpen","closeQuestionModal","updateTenantComment","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useCallback } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport axios from \"axios\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //BACKEND  FUNCTIONS\n  const API_URL = \"http://localhost:8080\";\n\n  const prepareFbChecklistReport = (checklist) => {\n    let report = [];\n    //iterate through eac checklist question\n    checklist.map((question) => {\n      report = [...report, { qn_id: question.fb_qn_id, status: false }];\n    });\n    return report;\n  };\n\n  const getFbChecklistQuestions = useCallback(() => {\n    return axios\n      .get(`${API_URL}/report/getAllQuestions`, {\n        params: { type: \"FB\" },\n      })\n      .then((response) => {\n        console.log(response);\n        setFbChecklistState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  //FRONTEND FUNCTIONS\n  //state for report\n  const [fbReportState, setFbReportState] = useState([]);\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n  //state of comments in modal\n  const [comment, setComment] = useState(\"\");\n\n  //function to prepare report state\n  const createFbReportState = useCallback((checklist) => {\n    checklist.map((question) => {\n      const { fb_qn_id } = question;\n      setFbReportState(...fbReportState, { qn_id: fb_qn_id, status: false });\n    });\n  }, []);\n\n  //function to update tenantsState\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantid\n    );\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    }, 0);\n\n    setAuditsState((prevAudits) => {\n      return [\n        ...prevAudits,\n        {\n          tenantid: tenantid,\n          type: type,\n          tenantname: tenantname,\n          // timeremaining: timeremaining,\n          status: status,\n          // date: date,\n          institution: tenantObject.institution,\n          score: score,\n        },\n      ];\n    });\n  };\n\n  //function to reset tenant's fb checklist checked values\n  const resetTenantFbChecklist = (tenantId) => {\n    const tenantObject = tenantsState.find(\n      (tenant) => tenant.tenantid === tenantId\n    );\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //reset each checked to false\n    tenantFbChecklist.forEach((question) => {\n      question.checked = false;\n    });\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //functions to close and open modal\n  const openQuestionModal = (questionId) => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n  const closeQuestionModal = (questionId) => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find((question) => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false;\n    // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  //functions to update tenant comment property\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState);\n\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        openQuestionModal,\n        closeQuestionModal,\n        tenantsState,\n        setTenantsState,\n        updateFbChecklistChecked,\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n        resetTenantFbChecklist,\n        comment,\n        setComment,\n        updateTenantComment,\n        getFbChecklistQuestions,\n        prepareFbChecklistReport,\n        fbReportState,\n        setFbReportState,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}