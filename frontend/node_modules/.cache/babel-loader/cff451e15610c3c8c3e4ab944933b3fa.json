{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state to check if modal is open\n\n  const [modalOpen, setModalOpen] = useState(false); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //function to update tenantsState\n\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenants.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.checked = !checklistQuestion.checked;\n    const remainingQuestions = tenantFbChecklist.filter(question => {\n      return question.id !== questionId;\n    });\n    const newTenantChecklist = [...remainingQuestions, checklistQuestion]; //update tenantObject\n\n    tenantObject[fbChecklist] = newTenantChecklist; //get tenants array without tenantObject\n\n    const remainingTenants = tenants.filter(tenant => {\n      return tenant.tenantid !== tenantId;\n    }); //update state with newTenantObject\n\n    setTenantsState([...remainingTenants, tenantObject]);\n  }; //function to update audits state\n\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenants.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    });\n    setAuditsState([...audits, {\n      tenantid: tenantid,\n      type: type,\n      tenantname: tenantname,\n      // timeremaining: timeremaining,\n      status: status,\n      // date: date,\n      institution: tenantObject.institution,\n      score: score\n    }]);\n  }; //functions to change modalOpen state\n\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      modalOpen,\n      setModalOpen,\n      openModal,\n      closeModal,\n      tenantsState,\n      setTenantsState,\n      updateFbChecklistChecked,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"yLR/xSbhZUexBH/8liquiupPmKM=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/Context.js"],"names":["React","useState","createContext","audits","fbChecklist","tenants","institutions","Context","ContextProvider","props","auditsState","setAuditsState","tenantsState","setTenantsState","modalOpen","setModalOpen","fbChecklistState","setFbChecklistState","institutionsState","setInstitutionstate","updateFbChecklistChecked","tenantId","questionId","tenantObject","find","tenant","tenantid","tenantFbChecklist","checklistQuestion","question","id","checked","remainingQuestions","filter","newTenantChecklist","remainingTenants","updateAudit","type","tenantname","status","score","reduce","total","institution","openModal","closeModal","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\n\nexport const Context = createContext();\n\nexport const ContextProvider = (props) => {\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits);\n  //state to keep track of all tenants\n  const [tenantsState, setTenantsState] = useState(tenants);\n  //state to check if modal is open\n  const [modalOpen, setModalOpen] = useState(false);\n  //state for fbChecklist\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\n  //state for institutions\n  const [institutionsState, setInstitutionstate] = useState(institutions);\n\n  //function to update tenantsState\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenants.find((tenant) => {\n      return tenant.tenantid === tenantId;\n    });\n    //fbchecklist property for a tenant\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    //find question within the array of questions\n    const checklistQuestion = tenantFbChecklist.find((question) => {\n      return question.id === questionId;\n    });\n    //update checked property\n    checklistQuestion.checked = !checklistQuestion.checked;\n\n    const remainingQuestions = tenantFbChecklist.filter((question) => {\n      return question.id !== questionId;\n    });\n\n    const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    //update tenantObject\n    tenantObject[fbChecklist] = newTenantChecklist;\n    //get tenants array without tenantObject\n    const remainingTenants = tenants.filter((tenant) => {\n      return tenant.tenantid !== tenantId;\n    });\n    //update state with newTenantObject\n    setTenantsState([...remainingTenants, tenantObject]);\n  };\n\n  //function to update audits state\n  const updateAudit = (\n    tenantid,\n    type,\n    tenantname,\n    // timeremaining,\n    status\n    // date\n  ) => {\n    const tenantObject = tenants.find((tenant) => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n      return total;\n    });\n\n    setAuditsState([\n      ...audits,\n      {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score,\n      },\n    ]);\n  };\n\n  //functions to change modalOpen state\n  const openModal = () => {\n    setModalOpen(true);\n  };\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        modalOpen,\n        setModalOpen,\n        openModal,\n        closeModal,\n        tenantsState,\n        setTenantsState,\n        updateFbChecklistChecked,\n        fbChecklistState,\n        setFbChecklistState,\n        auditsState,\n        setAuditsState,\n        updateAudit,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}