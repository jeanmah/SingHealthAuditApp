{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Modal from \"../components/Modal\";\nimport Navbar from \"../Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FbCategory() {\n  _s();\n\n  //get tenant id from url\n  const {\n    tenantId\n  } = useParams(); //Context: Fb Checklist\n\n  const {\n    fbChecklistState,\n    getFbChecklistQuestions,\n    setFbChecklistState,\n    prepareFbChecklistReport\n  } = useContext(Context); //Context: to call update audits function and reset checked values after clicking submit\n  // const { updateAudit, resetTenantFbChecklist } = useContext(Context);\n  // //Context: tenants state\n  // const { tenantsState } = useContext(Context);\n\n  useEffect(() => {\n    getFbChecklistQuestions(\"FB\").then(response => {\n      console.log(response);\n      setFbChecklistState(response.data);\n    }).catch(() => {\n      console.log(\"failed to retrieve fbchecklist\");\n    });\n  }, []); //retrieve fbchecklist questions from backend\n\n  getFbChecklistQuestions(\"FB\").then(response => {\n    setFbChecklistState(response.data);\n  }).catch(() => {\n    console.log(\"failed to retrieve fbchecklist\");\n  }); //create new array of questions with status to allow checking of pass/fail\n  // const fbChecklistReport = prepareFbChecklistReport(fbChecklistState);\n  // console.log(fbChecklistReport);\n  // const tenantObject = tenantsState.find(\n  //   (tenant) => tenant.tenantid === tenantId\n  // );\n  //destructure tenantObject\n  // const { tenantid, tenantName, status, institution } = tenantObject;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-head\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"FB Checklist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), fbChecklistState.map((question, index) => {\n        const {\n          fb_qn_id,\n          requirement\n        } = question;\n        return /*#__PURE__*/_jsxDEV(Question, {\n          fb_qn_id: fb_qn_id,\n          requirement: requirement,\n          tenantId: tenantId\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/tenant/${tenantId}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FbCategory, \"NfeSnNmBXeYsy0jU8EfLGCthh+E=\", false, function () {\n  return [useParams];\n});\n\n_c = FbCategory;\nexport default FbCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"FbCategory\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js"],"names":["React","useState","useContext","useEffect","Link","useParams","Question","Context","Modal","Navbar","FbCategory","tenantId","fbChecklistState","getFbChecklistQuestions","setFbChecklistState","prepareFbChecklistReport","then","response","console","log","data","catch","map","question","index","fb_qn_id","requirement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeN,SAAS,EAA9B,CAFoB,CAGpB;;AACA,QAAM;AACJO,IAAAA,gBADI;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,mBAHI;AAIJC,IAAAA;AAJI,MAKFb,UAAU,CAACK,OAAD,CALd,CAJoB,CAUpB;AACA;AACA;AACA;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,uBAAuB,CAAC,IAAD,CAAvB,CACGG,IADH,CACSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAH,MAAAA,mBAAmB,CAACG,QAAQ,CAACG,IAAV,CAAnB;AACD,KAJH,EAKGC,KALH,CAKS,MAAM;AACXH,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD,KAPH;AAQD,GATQ,EASN,EATM,CAAT,CAdoB,CAyBpB;;AACAN,EAAAA,uBAAuB,CAAC,IAAD,CAAvB,CACGG,IADH,CACSC,QAAD,IAAc;AAClBH,IAAAA,mBAAmB,CAACG,QAAQ,CAACG,IAAV,CAAnB;AACD,GAHH,EAIGC,KAJH,CAIS,MAAM;AACXH,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD,GANH,EA1BoB,CAiCpB;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,EASGP,gBAAgB,CAACU,GAAjB,CAAqB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,cAAM;AAAEC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA4BH,QAAlC;AACA,4BACE,QAAC,QAAD;AAEE,UAAA,QAAQ,EAAEE,QAFZ;AAGE,UAAA,WAAW,EAAEC,WAHf;AAIE,UAAA,QAAQ,EAAEf;AAJZ,WACOa,KADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OAVA,CATH,eAoBE;AAAA;AAAA;AAAA;AAAA,cApBF,eAsBE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,WAAUb,QAAS,EAA9B;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAsCD;;GAlFQD,U;UAEcL,S;;;KAFdK,U;AAoFT,eAAeA,UAAf","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Modal from \"../components/Modal\";\nimport Navbar from \"../Navbar\";\n\nfunction FbCategory() {\n  //get tenant id from url\n  const { tenantId } = useParams();\n  //Context: Fb Checklist\n  const {\n    fbChecklistState,\n    getFbChecklistQuestions,\n    setFbChecklistState,\n    prepareFbChecklistReport,\n  } = useContext(Context);\n  //Context: to call update audits function and reset checked values after clicking submit\n  // const { updateAudit, resetTenantFbChecklist } = useContext(Context);\n  // //Context: tenants state\n  // const { tenantsState } = useContext(Context);\n  useEffect(() => {\n    getFbChecklistQuestions(\"FB\")\n      .then((response) => {\n        console.log(response);\n        setFbChecklistState(response.data);\n      })\n      .catch(() => {\n        console.log(\"failed to retrieve fbchecklist\");\n      });\n  }, []);\n\n  //retrieve fbchecklist questions from backend\n  getFbChecklistQuestions(\"FB\")\n    .then((response) => {\n      setFbChecklistState(response.data);\n    })\n    .catch(() => {\n      console.log(\"failed to retrieve fbchecklist\");\n    });\n  //create new array of questions with status to allow checking of pass/fail\n  // const fbChecklistReport = prepareFbChecklistReport(fbChecklistState);\n\n  // console.log(fbChecklistReport);\n\n  // const tenantObject = tenantsState.find(\n  //   (tenant) => tenant.tenantid === tenantId\n  // );\n  //destructure tenantObject\n  // const { tenantid, tenantName, status, institution } = tenantObject;\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"category-head\">\n        {/* {fbChecklistState.map((question) => {\n          const { fb_qn_id } = question;\n          return (\n            <Modal key={fb_qn_id} questionId={fb_qn_id} tenantId={tenantId} />\n          );\n        })} */}\n\n        <h2>FB Checklist</h2>\n        {fbChecklistState.map((question, index) => {\n          const { fb_qn_id, requirement } = question;\n          return (\n            <Question\n              key={index}\n              fb_qn_id={fb_qn_id}\n              requirement={requirement}\n              tenantId={tenantId}\n            />\n          );\n        })}\n        <br />\n\n        <Link to={`/tenant/${tenantId}`}>\n          <button\n          // onClick={() => {\n          //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n          //   resetTenantFbChecklist(tenantId);\n          // }}\n          >\n            Submit\n          </button>\n        </Link>\n      </div>\n    </>\n  );\n}\n\nexport default FbCategory;\n"]},"metadata":{},"sourceType":"module"}