{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Navbar from \"../Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FbCategory() {\n  _s();\n\n  //get tenant id from url\n  const {\n    tenantId\n  } = useParams(); //Context: Fb Checklist\n\n  const {\n    fbChecklistState,\n    setFbChecklistState,\n    getFbChecklistQuestions,\n    fbReportState,\n    setFbReportState,\n    submitFbReport\n  } = useContext(Context);\n  const [isLoading, setIsLoading] = useState(true); //Context: to call update audits function and reset checked values after clicking submit\n  // const { updateAudit, resetTenantFbChecklist } = useContext(Context);\n  // //Context: tenants state\n  // const { tenantsState } = useContext(Context);\n  //call this function when component is mounted\n\n  useEffect(() => {\n    //function to retrieve questions\n    getFbChecklistQuestions();\n  }, []); //to set isLoading to false and display HTML DOM elements when fbChecklistState is complete\n\n  useEffect(() => {\n    if (fbChecklistState.length === 96) {\n      setIsLoading(false);\n    }\n  }, [fbChecklistState]); //function called when submit button is clicked\n  //retrieve fbchecklist questions from backend\n  // getFbChecklistQuestions(\"FB\")\n  //   .then((response) => {\n  //     setFbChecklistState(response.data);\n  //   })\n  //   .catch(() => {\n  //     console.log(\"failed to retrieve fbchecklist\");\n  //   });\n  //create new array of questions with status to allow checking of pass/fail\n  // const fbChecklistReport = prepareFbChecklistReport(fbChecklistState);\n  // console.log(fbChecklistReport);\n  // const tenantObject = tenantsState.find(\n  //   (tenant) => tenant.tenantid === tenantId\n  // );\n  //destructure tenantObject\n  // const { tenantid, tenantName, status, institution } = tenantObject;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-head\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"FB Checklist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), fbChecklistState.map((question, index) => {\n          const {\n            fb_qn_id,\n            requirement\n          } = question;\n          return /*#__PURE__*/_jsxDEV(Question, {\n            fb_qn_id: fb_qn_id,\n            requirement: requirement,\n            tenantId: tenantId\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          // onClick={() => {\n          //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n          //   resetTenantFbChecklist(tenantId);\n          // }}\n          onClick: () => submitFbReport(1006, fbReportState),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FbCategory, \"zOg25Iboav7hy/8bXG0zuv3ivjs=\", false, function () {\n  return [useParams];\n});\n\n_c = FbCategory;\nexport default FbCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"FbCategory\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js"],"names":["React","useState","useContext","useEffect","useCallback","useParams","Question","Context","Navbar","FbCategory","tenantId","fbChecklistState","setFbChecklistState","getFbChecklistQuestions","fbReportState","setFbReportState","submitFbReport","isLoading","setIsLoading","length","map","question","index","fb_qn_id","requirement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeL,SAAS,EAA9B,CAFoB,CAGpB;;AACA,QAAM;AACJM,IAAAA,gBADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,uBAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA;AANI,MAOFd,UAAU,CAACK,OAAD,CAPd;AASA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,IAAD,CAA1C,CAboB,CAepB;AACA;AACA;AACA;AAEA;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACd;AACAU,IAAAA,uBAAuB;AACxB,GAHQ,EAGN,EAHM,CAAT,CArBoB,CAyBpB;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,gBAAgB,CAACQ,MAAjB,KAA4B,EAAhC,EAAoC;AAClCD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACP,gBAAD,CAJM,CAAT,CA1BoB,CA+BpB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,eACGM,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADhB,EAEG,CAACA,SAAD,iBACC;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGN,gBAAgB,CAACS,GAAjB,CAAqB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,gBAAM;AAAEC,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,cAA4BH,QAAlC;AACA,8BACE,QAAC,QAAD;AAEE,YAAA,QAAQ,EAAEE,QAFZ;AAGE,YAAA,WAAW,EAAEC,WAHf;AAIE,YAAA,QAAQ,EAAEd;AAJZ,aACOY,KADP;AAAA;AAAA;AAAA;AAAA,kBADF;AAQD,SAVA,CAFH,eAaE;AAAA;AAAA;AAAA;AAAA,gBAbF,eAeE;AACE;AACA;AACA;AACA;AACA,UAAA,OAAO,EAAE,MAAMN,cAAc,CAAC,IAAD,EAAOF,aAAP,CAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;GAxFQL,U;UAEcJ,S;;;KAFdI,U;AA0FT,eAAeA,UAAf","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\n\nimport Navbar from \"../Navbar\";\n\nfunction FbCategory() {\n  //get tenant id from url\n  const { tenantId } = useParams();\n  //Context: Fb Checklist\n  const {\n    fbChecklistState,\n    setFbChecklistState,\n    getFbChecklistQuestions,\n    fbReportState,\n    setFbReportState,\n    submitFbReport,\n  } = useContext(Context);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  //Context: to call update audits function and reset checked values after clicking submit\n  // const { updateAudit, resetTenantFbChecklist } = useContext(Context);\n  // //Context: tenants state\n  // const { tenantsState } = useContext(Context);\n\n  //call this function when component is mounted\n  useEffect(() => {\n    //function to retrieve questions\n    getFbChecklistQuestions();\n  }, []);\n  //to set isLoading to false and display HTML DOM elements when fbChecklistState is complete\n  useEffect(() => {\n    if (fbChecklistState.length === 96) {\n      setIsLoading(false);\n    }\n  }, [fbChecklistState]);\n  //function called when submit button is clicked\n\n  //retrieve fbchecklist questions from backend\n  // getFbChecklistQuestions(\"FB\")\n  //   .then((response) => {\n  //     setFbChecklistState(response.data);\n  //   })\n  //   .catch(() => {\n  //     console.log(\"failed to retrieve fbchecklist\");\n  //   });\n  //create new array of questions with status to allow checking of pass/fail\n  // const fbChecklistReport = prepareFbChecklistReport(fbChecklistState);\n\n  // console.log(fbChecklistReport);\n\n  // const tenantObject = tenantsState.find(\n  //   (tenant) => tenant.tenantid === tenantId\n  // );\n  //destructure tenantObject\n  // const { tenantid, tenantName, status, institution } = tenantObject;\n\n  return (\n    <div>\n      {isLoading && <div>Loading</div>}\n      {!isLoading && (\n        <>\n          <Navbar />\n          <div className=\"category-head\">\n            <h2>FB Checklist</h2>\n            {fbChecklistState.map((question, index) => {\n              const { fb_qn_id, requirement } = question;\n              return (\n                <Question\n                  key={index}\n                  fb_qn_id={fb_qn_id}\n                  requirement={requirement}\n                  tenantId={tenantId}\n                />\n              );\n            })}\n            <br />\n            {/* <Link to={`/tenant/${tenantId}`}> */}\n            <button\n              // onClick={() => {\n              //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n              //   resetTenantFbChecklist(tenantId);\n              // }}\n              onClick={() => submitFbReport(1006, fbReportState)}\n            >\n              Submit\n            </button>\n            {/* </Link> */}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default FbCategory;\n"]},"metadata":{},"sourceType":"module"}