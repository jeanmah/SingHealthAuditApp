{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Modal from \"../components/Modal\";\nimport Navbar from \"../Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FbCategory() {\n  _s();\n\n  //get tenant id from url\n  const {\n    tenantId\n  } = useParams(); //Context: Fb Checklist\n\n  const {\n    fbChecklistState,\n    setFbChecklistState,\n    getFbChecklistQuestions,\n    fbReportState,\n    setFbReportState\n  } = useContext(Context);\n  const [isLoading, setIsLoading] = useState(true); //Context: to call update audits function and reset checked values after clicking submit\n  // const { updateAudit, resetTenantFbChecklist } = useContext(Context);\n  // //Context: tenants state\n  // const { tenantsState } = useContext(Context);\n\n  useEffect(() => {\n    //callback function to retrieve questions\n    getFbChecklistQuestions(\"FB\").then(response => {\n      var verification = response.data;\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n      checkLoadingStatus(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []); //function to prepare report state\n\n  const createFbReportState = checklist => {\n    //create temporary array\n    let array = [];\n    checklist.forEach(question => {\n      const {\n        fb_qn_id\n      } = question;\n      array.push({\n        qn_id: fb_qn_id,\n        status: false\n      });\n    }); //set fbreportstate to array\n\n    setFbReportState(array);\n  };\n\n  const checkLoadingStatus = useCallback(responsedata => {\n    if (responsedata.length === fbChecklistState.length) {\n      setIsLoading(false);\n    }\n  }, [fbChecklistState]); //retrieve fbchecklist questions from backend\n  // getFbChecklistQuestions(\"FB\")\n  //   .then((response) => {\n  //     setFbChecklistState(response.data);\n  //   })\n  //   .catch(() => {\n  //     console.log(\"failed to retrieve fbchecklist\");\n  //   });\n  //create new array of questions with status to allow checking of pass/fail\n  // const fbChecklistReport = prepareFbChecklistReport(fbChecklistState);\n  // console.log(fbChecklistReport);\n  // const tenantObject = tenantsState.find(\n  //   (tenant) => tenant.tenantid === tenantId\n  // );\n  //destructure tenantObject\n  // const { tenantid, tenantName, status, institution } = tenantObject;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-head\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"FB Checklist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), fbChecklistState.map((question, index) => {\n          const {\n            fb_qn_id,\n            requirement\n          } = question;\n          return /*#__PURE__*/_jsxDEV(Question, {\n            fb_qn_id: fb_qn_id,\n            requirement: requirement,\n            tenantId: tenantId\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/tenant/${tenantId}`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FbCategory, \"lt9qv5r/KHby1VfPhMoj4yKK88k=\", false, function () {\n  return [useParams];\n});\n\n_c = FbCategory;\nexport default FbCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"FbCategory\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js"],"names":["React","useState","useContext","useEffect","Link","useParams","Question","Context","Modal","Navbar","FbCategory","tenantId","fbChecklistState","setFbChecklistState","getFbChecklistQuestions","fbReportState","setFbReportState","isLoading","setIsLoading","then","response","verification","data","createFbReportState","checkLoadingStatus","catch","console","log","checklist","array","forEach","question","fb_qn_id","push","qn_id","status","useCallback","responsedata","length","map","index","requirement"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Modal from \"../components/Modal\";\nimport Navbar from \"../Navbar\";\n\nfunction FbCategory() {\n  //get tenant id from url\n  const { tenantId } = useParams();\n  //Context: Fb Checklist\n  const {\n    fbChecklistState,\n    setFbChecklistState,\n    getFbChecklistQuestions,\n    fbReportState,\n    setFbReportState,\n  } = useContext(Context);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  //Context: to call update audits function and reset checked values after clicking submit\n  // const { updateAudit, resetTenantFbChecklist } = useContext(Context);\n  // //Context: tenants state\n  // const { tenantsState } = useContext(Context);\n\n  useEffect(() => {\n    //callback function to retrieve questions\n    getFbChecklistQuestions(\"FB\")\n      .then((response) => {\n        var verification = response.data;\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n        checkLoadingStatus(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  //function to prepare report state\n  const createFbReportState = (checklist) => {\n    //create temporary array\n    let array = [];\n    checklist.forEach((question) => {\n      const { fb_qn_id } = question;\n      array.push({ qn_id: fb_qn_id, status: false });\n    });\n    //set fbreportstate to array\n    setFbReportState(array);\n  };\n\n  const checkLoadingStatus = useCallback(\n    (responsedata) => {\n      if (responsedata.length === fbChecklistState.length) {\n        setIsLoading(false);\n      }\n    },\n    [fbChecklistState]\n  );\n  //retrieve fbchecklist questions from backend\n  // getFbChecklistQuestions(\"FB\")\n  //   .then((response) => {\n  //     setFbChecklistState(response.data);\n  //   })\n  //   .catch(() => {\n  //     console.log(\"failed to retrieve fbchecklist\");\n  //   });\n  //create new array of questions with status to allow checking of pass/fail\n  // const fbChecklistReport = prepareFbChecklistReport(fbChecklistState);\n\n  // console.log(fbChecklistReport);\n\n  // const tenantObject = tenantsState.find(\n  //   (tenant) => tenant.tenantid === tenantId\n  // );\n  //destructure tenantObject\n  // const { tenantid, tenantName, status, institution } = tenantObject;\n\n  return (\n    <div>\n      {isLoading && <div>Loading</div>}\n      {!isLoading && (\n        <>\n          <Navbar />\n          <div className=\"category-head\">\n            <h2>FB Checklist</h2>\n            {fbChecklistState.map((question, index) => {\n              const { fb_qn_id, requirement } = question;\n              return (\n                <Question\n                  key={index}\n                  fb_qn_id={fb_qn_id}\n                  requirement={requirement}\n                  tenantId={tenantId}\n                />\n              );\n            })}\n            <br />\n            <Link to={`/tenant/${tenantId}`}>\n              <button\n              // onClick={() => {\n              //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n              //   resetTenantFbChecklist(tenantId);\n              // }}\n              >\n                Submit\n              </button>\n            </Link>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default FbCategory;\n"]},"metadata":{},"sourceType":"module"}