{"ast":null,"code":"var _jsxFileName = \"/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Loading from \"./Loading\";\nimport Navbar from \"../Navbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\"; //styling for the fbchecklist page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  },\n  button: {\n    color: \"#F15A22\",\n    fontWeight: \"medium\",\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nfunction FbChecklist() {\n  _s();\n\n  //get tenant id from url\n  const {\n    tenantId\n  } = useParams();\n  const [fbChecklistState, setFbChecklistState] = useState(); //Context: Fb Checklist\n\n  const {\n    getFbChecklistQuestions,\n    createFbReportState,\n    setFbReportState\n  } = useContext(Context);\n  const classes = useStyles();\n  const [checked, setChecked] = useState([]);\n\n  const handleToggle = question_id => () => {\n    //current question id\n    const currentIndex = checked.indexOf(question_id);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(question_id);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    } //update the checked state\n\n\n    setChecked(newChecked); //update fb report state\n\n    setFbReportState(prevState => {\n      return prevState.map(question => question.qn_id === question_id ? { ...question,\n        status: !question.status\n      } : question);\n    });\n  };\n\n  useEffect(() => {\n    //function to retrieve questions\n    getFbChecklistQuestions().then(response => {\n      setFbChecklistState(response.data);\n      createFbReportState(response.data);\n    }).catch(() => {\n      console.log(\"fb checklist retrieval failed\");\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: fbChecklistState ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        dense: true,\n        className: classes.root,\n        children: fbChecklistState.map((question, index) => {\n          const {\n            fb_qn_id,\n            requirement\n          } = question;\n          const labelId = `checkbox-list-secondary-label-${fb_qn_id}`;\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              id: fb_qn_id,\n              primary: `${requirement}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                edge: \"end\",\n                onChange: handleToggle(fb_qn_id),\n                checked: checked.indexOf(fb_qn_id) !== -1,\n                inputProps: {\n                  \"aria-labelledby\": labelId\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        size: \"small\" // color=\"secondary\"\n        ,\n        children: \"View Tenants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false) // <div>\n  //   {fbChecklistState ? (\n  //     <>\n  //       <Navbar />\n  //       <div className=\"category-head\">\n  //         <h2>FB Checklist</h2>\n  //         {fbChecklistState.map((question, index) => {\n  //           const { fb_qn_id, requirement } = question;\n  //           return (\n  //             <Question\n  //               key={index}\n  //               fb_qn_id={fb_qn_id}\n  //               requirement={requirement}\n  //               tenantId={tenantId}\n  //             />\n  //           );\n  //         })}\n  //         <br />\n  //         {/* <Link to={`/tenant/${tenantId}`}> */}\n  //         <button\n  //           // onClick={() => {\n  //           //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n  //           //   resetTenantFbChecklist(tenantId);\n  //           // }}\n  //           onClick={() => submitFbReport(1006, fbReportState)}\n  //         >\n  //           Submit\n  //         </button>\n  //         {/* </Link> */}\n  //       </div>\n  //     </>\n  //   ) : (\n  //     <Loading />\n  //   )}\n  // </div>\n  ;\n}\n\n_s(FbChecklist, \"utYYBybYpez6c/XHJDOI3CfC1fY=\", false, function () {\n  return [useParams, useStyles];\n});\n\n_c = FbChecklist;\nexport default FbChecklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"FbChecklist\");","map":{"version":3,"sources":["/Users/marcushjw/mainsinghealth/SingHealthAuditApp/frontend/src/pages/FbChecklist.js"],"names":["React","useState","useContext","useEffect","useCallback","useParams","Question","Context","Loading","Navbar","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","ListItemAvatar","Checkbox","Avatar","Button","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","display","flexDirection","justifyContent","button","color","fontWeight","FbChecklist","tenantId","fbChecklistState","setFbChecklistState","getFbChecklistQuestions","createFbReportState","setFbReportState","classes","checked","setChecked","handleToggle","question_id","currentIndex","indexOf","newChecked","push","splice","prevState","map","question","qn_id","status","then","response","data","catch","console","log","index","fb_qn_id","requirement","labelId"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Question from \"../components/Question\";\nimport { Context } from \"../Context\";\nimport Loading from \"./Loading\";\nimport Navbar from \"../Navbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\n\n//styling for the fbchecklist page\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  button: {\n    color: \"#F15A22\",\n    fontWeight: \"medium\",\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction FbChecklist() {\n  //get tenant id from url\n  const { tenantId } = useParams();\n\n  const [fbChecklistState, setFbChecklistState] = useState();\n  //Context: Fb Checklist\n  const {\n    getFbChecklistQuestions,\n    createFbReportState,\n    setFbReportState,\n  } = useContext(Context);\n\n  const classes = useStyles();\n\n  const [checked, setChecked] = useState([]);\n\n  const handleToggle = (question_id) => () => {\n    //current question id\n    const currentIndex = checked.indexOf(question_id);\n\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(question_id);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    //update the checked state\n    setChecked(newChecked);\n    //update fb report state\n    setFbReportState((prevState) => {\n      return prevState.map((question) =>\n        question.qn_id === question_id\n          ? { ...question, status: !question.status }\n          : question\n      );\n    });\n  };\n\n  useEffect(() => {\n    //function to retrieve questions\n    getFbChecklistQuestions()\n      .then((response) => {\n        setFbChecklistState(response.data);\n        createFbReportState(response.data);\n      })\n      .catch(() => {\n        console.log(\"fb checklist retrieval failed\");\n      });\n  }, []);\n\n  return (\n    <>\n      {fbChecklistState ? (\n        <>\n          <Navbar />\n          <List dense className={classes.root}>\n            {fbChecklistState.map((question, index) => {\n              const { fb_qn_id, requirement } = question;\n              const labelId = `checkbox-list-secondary-label-${fb_qn_id}`;\n              return (\n                <ListItem key={index} button>\n                  <ListItemText id={fb_qn_id} primary={`${requirement}`} />\n                  <ListItemSecondaryAction>\n                    <Checkbox\n                      edge=\"end\"\n                      onChange={handleToggle(fb_qn_id)}\n                      checked={checked.indexOf(fb_qn_id) !== -1}\n                      inputProps={{ \"aria-labelledby\": labelId }}\n                    />\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n          </List>\n          <Button\n            className={classes.button}\n            size=\"small\"\n            // color=\"secondary\"\n          >\n            View Tenants\n          </Button>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </>\n    // <div>\n    //   {fbChecklistState ? (\n    //     <>\n    //       <Navbar />\n    //       <div className=\"category-head\">\n    //         <h2>FB Checklist</h2>\n    //         {fbChecklistState.map((question, index) => {\n    //           const { fb_qn_id, requirement } = question;\n    //           return (\n    //             <Question\n    //               key={index}\n    //               fb_qn_id={fb_qn_id}\n    //               requirement={requirement}\n    //               tenantId={tenantId}\n    //             />\n    //           );\n    //         })}\n    //         <br />\n    //         {/* <Link to={`/tenant/${tenantId}`}> */}\n    //         <button\n    //           // onClick={() => {\n    //           //   updateAudit(tenantId, \"FB\", tenantName, \"unresolved\");\n    //           //   resetTenantFbChecklist(tenantId);\n    //           // }}\n    //           onClick={() => submitFbReport(1006, fbReportState)}\n    //         >\n    //           Submit\n    //         </button>\n    //         {/* </Link> */}\n    //       </div>\n    //     </>\n    //   ) : (\n    //     <Loading />\n    //   )}\n    // </div>\n  );\n}\n\nexport default FbChecklist;\n"]},"metadata":{},"sourceType":"module"}