{"ast":null,"code":"var _jsxFileName = \"F:\\\\Space\\\\LunarHaven\\\\eclipse-workspace\\\\[GIT] SingHealthWebApp\\\\frontend\\\\src\\\\Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const ContextProvider = props => {\n  _s();\n\n  //state to keep track of audit\n  const [auditsState, setAuditsState] = useState(audits); //state to keep track of all tenants\n\n  const [tenantsState, setTenantsState] = useState(tenants); //state for fbChecklist\n\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist); //state for institutions\n\n  const [institutionsState, setInstitutionstate] = useState(institutions); //state of comments in modal\n\n  const [comment, setComment] = useState(\"\"); //state of modal questionid\n  //function to update tenantsState\n\n  const updateFbChecklistChecked = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.checked = !checklistQuestion.checked;\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //function to update audits state\n\n\n  const updateAudit = (tenantid, type, tenantname, // timeremaining,\n  status // date\n  ) => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantid);\n    const tenantFbChecklist = tenantObject.fbChecklist;\n    let score = tenantFbChecklist.reduce((total, question) => {\n      if (question.checked === true) {\n        total += 1;\n      }\n\n      return total;\n    }, 0);\n    setAuditsState(prevAudits => {\n      return [...prevAudits, {\n        tenantid: tenantid,\n        type: type,\n        tenantname: tenantname,\n        // timeremaining: timeremaining,\n        status: status,\n        // date: date,\n        institution: tenantObject.institution,\n        score: score\n      }];\n    });\n  }; //function to reset tenant's fb checklist checked values\n\n\n  const resetTenantFbChecklist = tenantId => {\n    const tenantObject = tenantsState.find(tenant => tenant.tenantid === tenantId); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //reset each checked to false\n\n    tenantFbChecklist.forEach(question => {\n      question.checked = false;\n    }); // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n  }; //functions to close and open modal\n\n\n  const openQuestionModal = questionId => {\n    console.log(\"clicked openmodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = true; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  };\n\n  const closeQuestionModal = questionId => {\n    console.log(\"clicked closemodal\");\n    const checklistQuestion = fbChecklistState.find(question => {\n      return question.id === questionId;\n    });\n    checklistQuestion.modalOpen = false; // const remainingQuestions = fbChecklistState.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\n  }; //functions to update tenant comment property\n\n\n  const updateTenantComment = (tenantId, questionId) => {\n    //find object with specific tenantId\n    const tenantObject = tenantsState.find(tenant => {\n      return tenant.tenantid === tenantId;\n    }); //fbchecklist property for a tenant\n\n    const tenantFbChecklist = tenantObject.fbChecklist; //find question within the array of questions\n\n    const checklistQuestion = tenantFbChecklist.find(question => {\n      return question.id === questionId;\n    }); //update checked property\n\n    checklistQuestion.comment = comment;\n    console.log(tenantId, questionId);\n    console.log(tenantObject);\n    console.log(tenantsState); // const remainingQuestions = tenantFbChecklist.filter((question) => {\n    //   return question.id !== questionId;\n    // });\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\n    // //update tenantObject\n    // tenantObject[fbChecklist] = newTenantChecklist;\n    // //get tenants array without tenantObject\n    // const remainingTenants = tenantsState.filter((tenant) => {\n    //   return tenant.tenantid !== tenantId;\n    // });\n    // //update state with newTenantObject\n    // setTenantsState([...remainingTenants, tenantObject]);\n    // console.log(tenantsState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      openQuestionModal,\n      closeQuestionModal,\n      tenantsState,\n      setTenantsState,\n      updateFbChecklistChecked,\n      fbChecklistState,\n      setFbChecklistState,\n      auditsState,\n      setAuditsState,\n      updateAudit,\n      resetTenantFbChecklist,\n      comment,\n      setComment,\n      updateTenantComment\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"NQDnxXSFSRTLfhCbo3NrE1vyQLo=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["F:/Space/LunarHaven/eclipse-workspace/[GIT] SingHealthWebApp/frontend/src/Context.js"],"names":["React","useState","createContext","audits","fbChecklist","tenants","institutions","Context","ContextProvider","props","auditsState","setAuditsState","tenantsState","setTenantsState","fbChecklistState","setFbChecklistState","institutionsState","setInstitutionstate","comment","setComment","updateFbChecklistChecked","tenantId","questionId","tenantObject","find","tenant","tenantid","tenantFbChecklist","checklistQuestion","question","id","checked","console","log","updateAudit","type","tenantname","status","score","reduce","total","prevAudits","institution","resetTenantFbChecklist","forEach","openQuestionModal","modalOpen","closeQuestionModal","updateTenantComment","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport { audits, fbChecklist, tenants, institutions } from \"./data\";\r\n\r\nexport const Context = createContext();\r\n\r\nexport const ContextProvider = (props) => {\r\n  //state to keep track of audit\r\n  const [auditsState, setAuditsState] = useState(audits);\r\n  //state to keep track of all tenants\r\n  const [tenantsState, setTenantsState] = useState(tenants);\r\n  //state for fbChecklist\r\n  const [fbChecklistState, setFbChecklistState] = useState(fbChecklist);\r\n  //state for institutions\r\n  const [institutionsState, setInstitutionstate] = useState(institutions);\r\n  //state of comments in modal\r\n  const [comment, setComment] = useState(\"\");\r\n  //state of modal questionid\r\n\r\n  //function to update tenantsState\r\n  const updateFbChecklistChecked = (tenantId, questionId) => {\r\n    //find object with specific tenantId\r\n    const tenantObject = tenantsState.find((tenant) => {\r\n      return tenant.tenantid === tenantId;\r\n    });\r\n    //fbchecklist property for a tenant\r\n    const tenantFbChecklist = tenantObject.fbChecklist;\r\n    //find question within the array of questions\r\n    const checklistQuestion = tenantFbChecklist.find((question) => {\r\n      return question.id === questionId;\r\n    });\r\n    //update checked property\r\n    checklistQuestion.checked = !checklistQuestion.checked;\r\n    console.log(tenantsState);\r\n\r\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\r\n    //   return question.id !== questionId;\r\n    // });\r\n\r\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\r\n    // //update tenantObject\r\n    // tenantObject[fbChecklist] = newTenantChecklist;\r\n    // //get tenants array without tenantObject\r\n    // const remainingTenants = tenantsState.filter((tenant) => {\r\n    //   return tenant.tenantid !== tenantId;\r\n    // });\r\n\r\n    // //update state with newTenantObject\r\n    // setTenantsState([...remainingTenants, tenantObject]);\r\n  };\r\n\r\n  //function to update audits state\r\n  const updateAudit = (\r\n    tenantid,\r\n    type,\r\n    tenantname,\r\n    // timeremaining,\r\n    status\r\n    // date\r\n  ) => {\r\n    const tenantObject = tenantsState.find(\r\n      (tenant) => tenant.tenantid === tenantid\r\n    );\r\n    const tenantFbChecklist = tenantObject.fbChecklist;\r\n    let score = tenantFbChecklist.reduce((total, question) => {\r\n      if (question.checked === true) {\r\n        total += 1;\r\n      }\r\n      return total;\r\n    }, 0);\r\n\r\n    setAuditsState((prevAudits) => {\r\n      return [\r\n        ...prevAudits,\r\n        {\r\n          tenantid: tenantid,\r\n          type: type,\r\n          tenantname: tenantname,\r\n          // timeremaining: timeremaining,\r\n          status: status,\r\n          // date: date,\r\n          institution: tenantObject.institution,\r\n          score: score,\r\n        },\r\n      ];\r\n    });\r\n  };\r\n\r\n  //function to reset tenant's fb checklist checked values\r\n  const resetTenantFbChecklist = (tenantId) => {\r\n    const tenantObject = tenantsState.find(\r\n      (tenant) => tenant.tenantid === tenantId\r\n    );\r\n    //fbchecklist property for a tenant\r\n    const tenantFbChecklist = tenantObject.fbChecklist;\r\n    //reset each checked to false\r\n    tenantFbChecklist.forEach((question) => {\r\n      question.checked = false;\r\n    });\r\n    // //get tenants array without tenantObject\r\n    // const remainingTenants = tenantsState.filter((tenant) => {\r\n    //   return tenant.tenantid !== tenantId;\r\n    // });\r\n    // //update state with newTenantObject\r\n    // setTenantsState([...remainingTenants, tenantObject]);\r\n  };\r\n\r\n  //functions to close and open modal\r\n  const openQuestionModal = (questionId) => {\r\n    console.log(\"clicked openmodal\");\r\n    const checklistQuestion = fbChecklistState.find((question) => {\r\n      return question.id === questionId;\r\n    });\r\n    checklistQuestion.modalOpen = true;\r\n    // const remainingQuestions = fbChecklistState.filter((question) => {\r\n    //   return question.id !== questionId;\r\n    // });\r\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\r\n  };\r\n  const closeQuestionModal = (questionId) => {\r\n    console.log(\"clicked closemodal\");\r\n    const checklistQuestion = fbChecklistState.find((question) => {\r\n      return question.id === questionId;\r\n    });\r\n    checklistQuestion.modalOpen = false;\r\n    // const remainingQuestions = fbChecklistState.filter((question) => {\r\n    //   return question.id !== questionId;\r\n    // });\r\n    // setFbChecklistState([...remainingQuestions, checklistQuestion]);\r\n  };\r\n\r\n  //functions to update tenant comment property\r\n  const updateTenantComment = (tenantId, questionId) => {\r\n    //find object with specific tenantId\r\n    const tenantObject = tenantsState.find((tenant) => {\r\n      return tenant.tenantid === tenantId;\r\n    });\r\n    //fbchecklist property for a tenant\r\n    const tenantFbChecklist = tenantObject.fbChecklist;\r\n    //find question within the array of questions\r\n    const checklistQuestion = tenantFbChecklist.find((question) => {\r\n      return question.id === questionId;\r\n    });\r\n    //update checked property\r\n    checklistQuestion.comment = comment;\r\n    console.log(tenantId, questionId);\r\n    console.log(tenantObject);\r\n    console.log(tenantsState);\r\n\r\n    // const remainingQuestions = tenantFbChecklist.filter((question) => {\r\n    //   return question.id !== questionId;\r\n    // });\r\n    // const newTenantChecklist = [...remainingQuestions, checklistQuestion];\r\n    // //update tenantObject\r\n    // tenantObject[fbChecklist] = newTenantChecklist;\r\n    // //get tenants array without tenantObject\r\n    // const remainingTenants = tenantsState.filter((tenant) => {\r\n    //   return tenant.tenantid !== tenantId;\r\n    // });\r\n\r\n    // //update state with newTenantObject\r\n    // setTenantsState([...remainingTenants, tenantObject]);\r\n    // console.log(tenantsState);\r\n  };\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        openQuestionModal,\r\n        closeQuestionModal,\r\n        tenantsState,\r\n        setTenantsState,\r\n        updateFbChecklistChecked,\r\n        fbChecklistState,\r\n        setFbChecklistState,\r\n        auditsState,\r\n        setAuditsState,\r\n        updateAudit,\r\n        resetTenantFbChecklist,\r\n        comment,\r\n        setComment,\r\n        updateTenantComment,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}