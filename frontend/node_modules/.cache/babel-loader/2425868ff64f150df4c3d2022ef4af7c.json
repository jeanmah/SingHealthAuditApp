{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/SingHealthAuditApp/frontend/src/pages/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Typography, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Context } from \"../Context\";\nimport Navbar from \"../Navbar\";\nimport useStyles from \"../styles\";\nimport { FormGroup } from \"@material-ui/core\";\nimport ChatCards from \"../components/ChatCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  const {\n    setAllChatsOfUserState,\n    allChatsOfUserState,\n    getAllChatsOfUser\n  } = useContext(Context);\n  const [allChatsState, setAllChatsState] = useState([]);\n  const styles = useStyles();\n  const chatsArray = [];\n  useEffect(() => {\n    //getAllChatsOfUser();\n    async function getResponse() {\n      try {\n        await getAllChatsOfUser().then(response => {\n          console.log(\"allChatsOfUser: \" + response.data);\n          response.data.map((chat, index) => {\n            //console.log(chat);\n            let newChat = {};\n            newChat.chat_id = chat.chat_id;\n            newChat.tenant_id = chat.tenant_id;\n            newChat.auditor_id = chat.auditor_id;\n\n            if (chat.messages.messages) {\n              newChat.messages = [...chat.messages.messages];\n            } else {\n              newChat.messages = [\"No message\"];\n            }\n\n            ;\n            chatsArray.push(newChat);\n            console.log(newChat);\n          });\n          console.log(chatsArray);\n          setAllChatsOfUserState(chatsArray);\n        });\n      } catch {\n        console.log(\"Failed to retrive allChatsOfUser\");\n      }\n    }\n\n    getResponse();\n  }, []);\n  console.log(allChatsOfUserState);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: styles.main,\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      align: \"center\",\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: styles.buttons,\n      align: \"center\",\n      variant: \"outlined\",\n      color: \"primary\",\n      fullWidth: true,\n      children: \"Get All Chats of User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatCards, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"SrOuQaVaGV+koePI8sZnC0q4gzU=\", false, function () {\n  return [useStyles];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/mac/Documents/SingHealthAuditApp/frontend/src/pages/Chat.js"],"names":["React","useEffect","useContext","useState","Link","Typography","Button","axios","Context","Navbar","useStyles","FormGroup","ChatCards","Chat","setAllChatsOfUserState","allChatsOfUserState","getAllChatsOfUser","allChatsState","setAllChatsState","styles","chatsArray","getResponse","then","response","console","log","data","map","chat","index","newChat","chat_id","tenant_id","auditor_id","messages","push","main","buttons"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Typography, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\n\nimport { Context } from \"../Context\";\nimport Navbar from \"../Navbar\";\nimport useStyles from \"../styles\";\nimport { FormGroup } from \"@material-ui/core\";\nimport ChatCards from \"../components/ChatCards\";\n\nfunction Chat() {\n\n  const {\n    setAllChatsOfUserState,\n    allChatsOfUserState,\n    getAllChatsOfUser\n  } = useContext(Context);\n\n  const [allChatsState, setAllChatsState] = useState([]);\n  const styles = useStyles();\n  const chatsArray = [];\n\n  useEffect(() => {\n    //getAllChatsOfUser();\n    async function getResponse() {\n      try{\n        await getAllChatsOfUser().then((response) => {\n          console.log(\"allChatsOfUser: \" + response.data);\n          response.data.map((chat, index) => {\n            //console.log(chat);\n            let newChat = {};\n            newChat.chat_id = chat.chat_id;\n            newChat.tenant_id = chat.tenant_id;\n            newChat.auditor_id = chat.auditor_id;\n            if (chat.messages.messages) {\n              newChat.messages = [...chat.messages.messages];\n            } else {\n              newChat.messages = [\"No message\"];\n            };\n            chatsArray.push(newChat);\n            console.log(newChat);\n          });\n          console.log(chatsArray);\n          setAllChatsOfUserState(chatsArray);\n        });\n      } catch {\n        console.log(\"Failed to retrive allChatsOfUser\");\n      }\n    }\n    getResponse();\n  }, []);\n\n  console.log(allChatsOfUserState);\n\n  return (\n    <main className={styles.main}>\n      <Navbar />\n      <br />\n      <Typography variant=\"h3\" align=\"center\">Chat</Typography>\n      <Button\n        className={styles.buttons}\n        align=\"center\"\n        variant=\"outlined\"\n        color=\"primary\"\n        fullWidth\n      >\n        Get All Chats of User\n      </Button>\n      <ChatCards />\n\n    </main>\n  )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}